{"Asset":[{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":false},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":false},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":false},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":false},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":false},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":false},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":false},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":false},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":false},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":false},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":false},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":false},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":false},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":false},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":false},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":false},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":false},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/yilia/source/assets/blogImg/Thumbs.db","path":"assets/blogImg/Thumbs.db","modified":false},{"_id":"themes/yilia/source/assets/blogImg/browser-history.jpg","path":"assets/blogImg/browser-history.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/border1px.jpg","path":"assets/blogImg/border1px.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/browser-history2.jpg","path":"assets/blogImg/browser-history2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys1.jpg","path":"assets/blogImg/bys1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys0.jpg","path":"assets/blogImg/bys0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys2.jpg","path":"assets/blogImg/bys2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys3.jpg","path":"assets/blogImg/bys3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt0.jpg","path":"assets/blogImg/ckxt0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt1.jpg","path":"assets/blogImg/ckxt1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt2.jpg","path":"assets/blogImg/ckxt2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt3.jpg","path":"assets/blogImg/ckxt3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt4.jpg","path":"assets/blogImg/ckxt4.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/css3_anm.jpg","path":"assets/blogImg/css3_anm.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/immersion.png","path":"assets/blogImg/immersion.png","modified":false},{"_id":"themes/yilia/source/assets/blogImg/css_hack.jpg","path":"assets/blogImg/css_hack.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/imp_search.jpg","path":"assets/blogImg/imp_search.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/instagram1.jpg","path":"assets/blogImg/instagram1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge1.jpg","path":"assets/blogImg/jiugongge1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/instagram2.jpg","path":"assets/blogImg/instagram2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge10.jpg","path":"assets/blogImg/jiugongge10.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge2.jpg","path":"assets/blogImg/jiugongge2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge3.jpg","path":"assets/blogImg/jiugongge3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge4.jpg","path":"assets/blogImg/jiugongge4.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge5.jpg","path":"assets/blogImg/jiugongge5.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge6.jpg","path":"assets/blogImg/jiugongge6.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge7.jpg","path":"assets/blogImg/jiugongge7.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge8.jpg","path":"assets/blogImg/jiugongge8.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge9.jpg","path":"assets/blogImg/jiugongge9.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/lijiang.jpg","path":"assets/blogImg/lijiang.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/lock.jpg","path":"assets/blogImg/lock.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/mediator1.jpg","path":"assets/blogImg/mediator1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/myReader0.jpg","path":"assets/blogImg/myReader0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/rabbit.jpg","path":"assets/blogImg/rabbit.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/reduce-http.jpg","path":"assets/blogImg/reduce-http.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_001.jpg","path":"assets/blogImg/safety_001.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_002.jpg","path":"assets/blogImg/safety_002.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_003.jpg","path":"assets/blogImg/safety_003.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_004.jpg","path":"assets/blogImg/safety_004.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_005.jpg","path":"assets/blogImg/safety_005.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/up1_tips.jpg","path":"assets/blogImg/up1_tips.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/volunteer1.jpg","path":"assets/blogImg/volunteer1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/volunteer2.jpg","path":"assets/blogImg/volunteer2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/volunteer3.jpg","path":"assets/blogImg/volunteer3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/web_worker1.png","path":"assets/blogImg/web_worker1.png","modified":false},{"_id":"themes/yilia/source/assets/blogImg/web_worker2.png","path":"assets/blogImg/web_worker2.png","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico0.jpg","path":"assets/blogImg/xmas_ico0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico1.jpg","path":"assets/blogImg/xmas_ico1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico2.jpg","path":"assets/blogImg/xmas_ico2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico3.jpg","path":"assets/blogImg/xmas_ico3.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/border1px.html","path":"assets/demo/border1px.html","modified":false},{"_id":"themes/yilia/source/assets/demo/hack_demo.html","path":"assets/demo/hack_demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo.html","path":"assets/demo/jiugongge_demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo2.html","path":"assets/demo/jiugongge_demo2.html","modified":false},{"_id":"themes/yilia/source/assets/demo/jquery.js","path":"assets/demo/jquery.js","modified":false},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.html","path":"assets/demo/coffee_pc_demo/pro-con.html","modified":false},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.js","path":"assets/demo/coffee_pc_demo/pro-con.js","modified":false},{"_id":"themes/yilia/source/assets/demo/mediator/demo.html","path":"assets/demo/mediator/demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/mediator/mediator.js","path":"assets/demo/mediator/mediator.js","modified":false},{"_id":"themes/yilia/source/assets/demo/mediator/sgws.jpg","path":"assets/demo/mediator/sgws.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/Thumbs.db","path":"assets/demo/pre_css3_demo/Thumbs.db","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/bg.jpg","path":"assets/demo/pre_css3_demo/bg.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/demo.html","path":"assets/demo/pre_css3_demo/demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/mhxy.png","path":"assets/demo/pre_css3_demo/mhxy.png","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/index.html","path":"assets/demo/gift/index.html","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/img/paper-b.jpg","path":"assets/demo/gift/img/paper-b.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/img/paper.jpg","path":"assets/demo/gift/img/paper.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/img/shake.png","path":"assets/demo/gift/img/shake.png","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/css/index.css","path":"assets/demo/gift/css/index.css","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/css/index.scss","path":"assets/demo/gift/css/index.scss","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/css/reset.css","path":"assets/demo/gift/css/reset.css","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/js/index.main.js","path":"assets/demo/gift/js/index.main.js","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/js/shake.js","path":"assets/demo/gift/js/shake.js","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/js/zepto.min.js","path":"assets/demo/gift/js/zepto.min.js","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/media/gift.ogg","path":"assets/demo/gift/media/gift.ogg","modified":false},{"_id":"themes/yilia/source/assets/demo/my_news_reader/index.html","path":"assets/demo/my_news_reader/index.html","modified":false},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/main.js","path":"assets/demo/my_news_reader/js/main.js","modified":false},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/tagConfig.js","path":"assets/demo/my_news_reader/js/tagConfig.js","modified":false},{"_id":"source/CNAME","path":"CNAME","modified":true}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1419229170000},{"_id":"scaffolds/photo.md","mtime":1419229170000},{"_id":"scaffolds/page.md","mtime":1419229170000},{"_id":"scaffolds/post.md","mtime":1419229170000},{"_id":"themes/landscape/Gruntfile.js","mtime":1419229170000},{"_id":"themes/landscape/LICENSE","mtime":1419229170000},{"_id":"themes/landscape/README.md","mtime":1419229170000},{"_id":"themes/landscape/_config.yml","mtime":1419229170000},{"_id":"themes/landscape/package.json","mtime":1419229170000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1419229170000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/category.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/index.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/page.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/post.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1419255291000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1419229170000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1419229170000},{"_id":"themes/landscape/source/js/script.js","mtime":1419229170000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/style.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1419229170000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1419229170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1419229170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1419229170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1419229170000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1419229170000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1419229170000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1419229170000},{"_id":"themes/yilia/README.md","mtime":1419255216000},{"_id":"themes/yilia/_config.yml","mtime":1419306479000},{"_id":"themes/yilia/package.json","mtime":1419255216000},{"_id":"themes/yilia/scripts/fancybox.js","mtime":1419255216000},{"_id":"themes/yilia/layout/archive.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/category.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/index.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/layout.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/page.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/post.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/tag.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/archive.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/article.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/footer.ejs","mtime":1419305181000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/head.ejs","mtime":1419338071000},{"_id":"themes/yilia/layout/_partial/header.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","mtime":1419304298000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","mtime":1419304611000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","mtime":1419255216000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","mtime":1419255216000},{"_id":"themes/yilia/source/img/coderwall.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/delicious.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/facebook.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/github.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/google.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/img-err.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/img-loading.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/linkedin.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/pinboard.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/pinterest.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/rss.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/stackoverflow.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/twitter.png","mtime":1419255216000},{"_id":"themes/yilia/source/img/weibo.png","mtime":1419255216000},{"_id":"themes/yilia/source/js/instagram.js","mtime":1419255216000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","mtime":1419255216000},{"_id":"themes/yilia/source/js/main.js","mtime":1419255216000},{"_id":"themes/yilia/source/js/script.js","mtime":1419255216000},{"_id":"themes/yilia/source/css/_extend.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_variables.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/style.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_util/grid.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_util/mixin.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/article.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/archive.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/footer.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/header.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/main.styl","mtime":1419305687000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/page.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/share.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","mtime":1419255216000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","mtime":1419255216000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","mtime":1419255216000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","mtime":1419255216000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","mtime":1419255216000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/blank.gif","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1419255216000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/Thumbs.db","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/browser-history.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/border1px.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/browser-history2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/bys1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/bys0.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/bys2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/bys3.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/ckxt0.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/ckxt1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/ckxt2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/ckxt3.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/ckxt4.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/css3_anm.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/immersion.png","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/css_hack.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/imp_search.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/instagram1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/instagram2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge10.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge3.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge4.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge5.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge6.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge7.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge8.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge9.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/lijiang.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/lock.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/mediator1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/myReader0.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/rabbit.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/reduce-http.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/safety_001.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/safety_002.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/safety_003.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/safety_004.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/safety_005.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/up1_tips.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/volunteer1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/volunteer2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/volunteer3.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/web_worker1.png","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/web_worker2.png","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico0.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico1.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico2.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico3.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/border1px.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/hack_demo.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo2.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/jquery.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/mediator/demo.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/mediator/mediator.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/mediator/sgws.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/Thumbs.db","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/bg.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/demo.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/mhxy.png","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/index.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/img/paper-b.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/img/paper.jpg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/img/shake.png","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/css/index.css","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/css/index.scss","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/css/reset.css","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/js/index.main.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/js/shake.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/js/zepto.min.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/gift/media/gift.ogg","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/index.html","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/main.js","mtime":1419255216000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/tagConfig.js","mtime":1419255216000},{"_id":"source/_posts/css/margin系列之keyword auto.md","mtime":1419257922000},{"_id":"source/_posts/about/joy.md","mtime":1419258604000},{"_id":"source/_posts/about/my-blog.md","mtime":1419258698000},{"_id":"source/_posts/css/margin系列之bug巡演.md","mtime":1419259153000},{"_id":"source/_posts/css/margin系列之bug巡演（三）.md","mtime":1419259300000},{"_id":"source/_posts/css/margin系列之bug巡演（二）.md","mtime":1419259275000},{"_id":"source/_posts/css/margin系列之与相对偏移的异同.md","mtime":1419259074000},{"_id":"source/_posts/css/margin系列之内秀篇.md","mtime":1419259117000},{"_id":"source/_posts/css/margin系列之内秀篇（二）.md","mtime":1419259233000},{"_id":"source/_posts/css/margin系列之外边距折叠.md","mtime":1419259064000},{"_id":"source/_posts/css/margin系列之布局篇.md","mtime":1419259339000},{"_id":"source/_posts/css/margin系列之百分比.md","mtime":1419259017000},{"_id":"source/_posts/css/你需要了解的z-index世界.md","mtime":1419259381000},{"_id":"source/_posts/job/join-us.md","mtime":1419258860000},{"_id":"source/_posts/life/一年又要过去了.md","mtime":1419304970000},{"_id":"source/CNAME","mtime":1419412751000}],"Category":[{"name":"CSS","_id":"8d0idf1a8smux0fk","posts":["ogn3wo6gye4uo4cf","krvosoe69d1gjb9a","qc0hk4qx9rz8bylv","htqok3nybzzjtqsv","gk2yywigqee4p0hh","d82qce8chti6rcfd","anj4tqm5e5iur7op","exrcgton01l5vs5f","3gkot1ry2vwxgcc3","zd2r0onmfn8hpidg","nex98aexu8ao65xp"]},{"name":"about","_id":"d8m43jpfhfacq1xv","posts":["rx6aw1zvw7r273qs","i45vh5wjql4mpqqf"]},{"name":"job","_id":"99fa30wtjirrj2t0","posts":["5izg4tcildopl0qt"]},{"name":"life","_id":"b5inm9squxr6gn43","posts":["qrp3w453mhf1txa1"]}],"Page":[],"Post":[{"title":"margin系列之keyword auto","date":1385694900000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858"],"content":"<h2 id=\"margin的重要性：\">margin的重要性：</h2>\n<p>有个不容置疑的事，前端开发人员没有人能够忽视CSS <code>margin</code>的重要性。CSS coding时，margin的使用频率就如同呼吸般频繁，如果我可以说得夸张点的话。</p>\n<p>margin作为CSS盒模型基本组成要素之一，是非常Basis的一个技术手段，所以我想对于它的一些基本情况应该不用太介绍了？</p>\n<h2 id=\"margin经常被用来做什么？\">margin经常被用来做什么？</h2>\n<ul>\n<li>让块元素水平居中；</li>\n<li>让元素之间留有舒适的留白；</li>\n<li>处理特殊的first或last，大家懂的？</li>\n<li>一些布局；</li>\n</ul>\n<h2 id=\"需要注意的地方：\">需要注意的地方：</h2>\n<ul>\n<li>margin折叠；</li>\n<li>margin的百分比值；</li>\n<li>margin的auto值；</li>\n<li>margin和相对偏移top, right, bottom, left的异同；</li>\n<li>IE6浮动双margin Bug；</li>\n<li>IE6浮动相邻元素3px Bug；</li>\n</ul>\n<p>看起来似乎有不少的知识点？恩，这些都是我们需要了解的，包括一些没有被列举出来的点。</p>\n<p>今天要讲的其实只是其中很少的一部分，恩，标题里有：keyword auto</p>\n<a id=\"more\"></a>\n\n<h2 id=\"keyword_auto\">keyword auto</h2>\n<p>auto是margin的可选值之一。相信大家平时使用auto值时，最多的用法大概是 <code>margin: 0 auto;</code> 和 <code>margin: auto;</code>，恩，是的，块元素水平居中。让我们来看看代码实现：</p>\n<h3 id=\"CSS:\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">500px</span></span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> auto</span></span>; <span class=\"comment\">/* 或者 margin: 0 auto; */</span></div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:\">HTML:</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>恩，我就是那个需要水平居中的家伙。<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>为了更明显点，我们来看个例子：<a href=\"//demo.doyoe.com/css/margin/horizontal-center.htm\">margin实现块元素水平居中</a>。Cool，这么简单就实现了水平居中。</p>\n<p>不过你可能也发现了不论是 <code>margin: auto;</code> 还是 <code>margin: 0 auto;</code> 效果都是一样的，都是让 #demo 水平居中了，但纵向并没有任何变化。</p>\n<p>大家都知道 <code>margin</code> 是复合属性，也就是说 <code>margin: auto;</code> 其实相当于 <code>margin: auto auto auto auto;</code>，<code>margin: 0 auto;</code>相当于 <code>margin: 0 auto 0 auto;</code>，四个值分别对应上右下左。至于CSS中的上、右、下、左顺序就不做赘述了。</p>\n<p>根据规范，<code>margin-top: auto;</code> 和 <code>margin-bottom: auto;</code>，其计算值为0。这也就解释了为什么 <code>margin: auto;</code> 等同于 <code>margin: 0 auto;</code>。但仅此而已吗？让我们来看看规范描述：</p>\n<blockquote>\n<p>原文：On the A edge and C edge, the used value of ‘auto’ is 0.</p>\n<p>翻译：如果场景是A和C，那么其 <code>auto</code> 计算值为 <code>0</code>。</p>\n<p><img src=\"//demo.doyoe.com/css/margin/images/margin.png\" alt=\"margin edge\"></p>\n<p>更详细请参阅：<a href=\"//dev.w3.org/csswg/css-box/#the-margin-properties\">margin properties</a></p>\n</blockquote>\n<p>由此可见，它们还与书写模式 <code>writing-mode</code> 和 文档流方向 <code>direction</code> 有关。所以我们说 <code>margin: auto;</code> 等同于 <code>margin: 0 auto;</code> 是不太精准的，因为还有前置条件。</p>\n<p>了解这些很重要，这有助于理解 <code>margin</code> 属性的设计意图。</p>\n<p>OK，聊了这么多，我们回到默认的 <code>writing-mode: horizontal-tb;</code> 和 <code>direction: ltr;</code> 的情况继续往下，后面的话题都基于这个前提。 </p>\n<h2 id=\"为什么auto能实现水平居中？\">为什么auto能实现水平居中？</h2>\n<p>这是因为水平方向的 <code>auto</code>，其计算值取决于可用空间（剩余空间）。</p>\n<blockquote>\n<p>原文：On the B edge and D edge, the used value depends on the available space.</p>\n<p>翻译：如果场景是B和D，那么其 <code>auto</code> 计算值取决于可用空间。</p>\n</blockquote>\n<p>想象这样一个场景，一个宽100px的p被包含在一个宽500px的div内，此时设置 p 的 margin-left 值为 auto，大家觉得结果会怎样？</p>\n<h3 id=\"CSS:-1\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">500px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">100px</span></span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"> auto</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:-1\">HTML:</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>恩，我就是那个p。<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>结果你猜到了吗？没猜到也不怕，用事实说话：<a href=\"//demo.doyoe.com/css/margin/margin-left-auto.htm\">margin-left关键字auto结果猜想</a>。</p>\n<p>好了，结果得到了，p相对于包含块右对齐了，这与规范描述一致。<code>margin-left:auto;</code> 自动占据了包含块的可用空间，即 500 - 100px = 400px。也就是说auto最后的计算值为400px，即 <code>margin-left:400px;</code>。所以 <code>margin-right:auto;</code> 的结果会相当于左对齐。</p>\n<p>到这里，相信大家都知道为什么 <code>margin: auto;</code> 和 <code>margin: 0 auto;</code> 能实现水平居中了。因为左右方向的auto值均分了可用空间，使得块元素得以在包含块内居中显示。</p>\n<p>至于垂直方向上为什么无法居中，还有更深层的原因吗？大家可以思考一下。</p>\n<h2 id=\"可参考：\">可参考：</h2>\n<ul>\n<li><a href=\"http://www.w3.org/TR/css3-box/#margins\" target=\"_blank\" rel=\"external\">http://www.w3.org/TR/css3-box/#margins</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#the-margin-properties\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#Calculating\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#Calculating</a></li>\n</ul>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之keyword auto.md","raw":"title: margin系列之keyword auto\ndate: 2013-11-29 11:15:00\ncategories: CSS\ntags: [margin, w3c]\n---\n\n## margin的重要性：\n\n有个不容置疑的事，前端开发人员没有人能够忽视CSS `margin`的重要性。CSS coding时，margin的使用频率就如同呼吸般频繁，如果我可以说得夸张点的话。\n\nmargin作为CSS盒模型基本组成要素之一，是非常Basis的一个技术手段，所以我想对于它的一些基本情况应该不用太介绍了？\n\n## margin经常被用来做什么？\n\n* 让块元素水平居中；\n* 让元素之间留有舒适的留白；\n* 处理特殊的first或last，大家懂的？\n* 一些布局；\n\n## 需要注意的地方：\n\n* margin折叠；\n* margin的百分比值；\n* margin的auto值；\n* margin和相对偏移top, right, bottom, left的异同；\n* IE6浮动双margin Bug；\n* IE6浮动相邻元素3px Bug；\n\n看起来似乎有不少的知识点？恩，这些都是我们需要了解的，包括一些没有被列举出来的点。\n\n今天要讲的其实只是其中很少的一部分，恩，标题里有：keyword auto\n\n<!--more-->\n\n## keyword auto\n\nauto是margin的可选值之一。相信大家平时使用auto值时，最多的用法大概是 `margin: 0 auto;` 和 `margin: auto;`，恩，是的，块元素水平居中。让我们来看看代码实现：\n\n### CSS:\n\n```css\n#demo{\n\twidth: 500px;\n\tmargin: auto; /* 或者 margin: 0 auto; */\n}\n```\n\n### HTML:\n```html\n<div id=\"demo\">\n\t<p>恩，我就是那个需要水平居中的家伙。</p>\n</div>\n```\n\n为了更明显点，我们来看个例子：[margin实现块元素水平居中](//demo.doyoe.com/css/margin/horizontal-center.htm)。Cool，这么简单就实现了水平居中。\n\n不过你可能也发现了不论是 `margin: auto;` 还是 `margin: 0 auto;` 效果都是一样的，都是让 #demo 水平居中了，但纵向并没有任何变化。\n\n大家都知道 `margin` 是复合属性，也就是说 `margin: auto;` 其实相当于 `margin: auto auto auto auto;`，`margin: 0 auto;`相当于 `margin: 0 auto 0 auto;`，四个值分别对应上右下左。至于CSS中的上、右、下、左顺序就不做赘述了。\n\n根据规范，`margin-top: auto;` 和 `margin-bottom: auto;`，其计算值为0。这也就解释了为什么 `margin: auto;` 等同于 `margin: 0 auto;`。但仅此而已吗？让我们来看看规范描述：\n\n> 原文：On the A edge and C edge, the used value of ‘auto’ is 0.\n>\n> 翻译：如果场景是A和C，那么其 `auto` 计算值为 `0`。\n>\n> ![margin edge](//demo.doyoe.com/css/margin/images/margin.png)\n>\n> 更详细请参阅：[margin properties](//dev.w3.org/csswg/css-box/#the-margin-properties)\n\n由此可见，它们还与书写模式 `writing-mode` 和 文档流方向 `direction` 有关。所以我们说 `margin: auto;` 等同于 `margin: 0 auto;` 是不太精准的，因为还有前置条件。\n\n了解这些很重要，这有助于理解 `margin` 属性的设计意图。\n\nOK，聊了这么多，我们回到默认的 `writing-mode: horizontal-tb;` 和 `direction: ltr;` 的情况继续往下，后面的话题都基于这个前提。 \n\n## 为什么auto能实现水平居中？\n\n这是因为水平方向的 `auto`，其计算值取决于可用空间（剩余空间）。\n\n> 原文：On the B edge and D edge, the used value depends on the available space.\n>\n> 翻译：如果场景是B和D，那么其 `auto` 计算值取决于可用空间。\n\n想象这样一个场景，一个宽100px的p被包含在一个宽500px的div内，此时设置 p 的 margin-left 值为 auto，大家觉得结果会怎样？\n\n### CSS:\n\n```css\n#demo{\n\twidth: 500px;\n}\n#demo p{\n\twidth: 100px;\n\tmargin-left: auto;\n}\n```\n\n### HTML:\n```html\n<div id=\"demo\">\n\t<p>恩，我就是那个p。</p>\n</div>\n```\n\n结果你猜到了吗？没猜到也不怕，用事实说话：[margin-left关键字auto结果猜想](//demo.doyoe.com/css/margin/margin-left-auto.htm)。\n\n好了，结果得到了，p相对于包含块右对齐了，这与规范描述一致。`margin-left:auto;` 自动占据了包含块的可用空间，即 500 - 100px = 400px。也就是说auto最后的计算值为400px，即 `margin-left:400px;`。所以 `margin-right:auto;` 的结果会相当于左对齐。\n\n到这里，相信大家都知道为什么 `margin: auto;` 和 `margin: 0 auto;` 能实现水平居中了。因为左右方向的auto值均分了可用空间，使得块元素得以在包含块内居中显示。\n\n至于垂直方向上为什么无法居中，还有更深层的原因吗？大家可以思考一下。\n\n## 可参考：\n\n* http://www.w3.org/TR/css3-box/#margins\n* http://dev.w3.org/csswg/css-box/#the-margin-properties\n* http://dev.w3.org/csswg/css-box/#Calculating\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之keyword auto","updated":1419257922000,"excerpt":"<h2 id=\"margin的重要性：\">margin的重要性：</h2>\n<p>有个不容置疑的事，前端开发人员没有人能够忽视CSS <code>margin</code>的重要性。CSS coding时，margin的使用频率就如同呼吸般频繁，如果我可以说得夸张点的话。</p>\n<p>margin作为CSS盒模型基本组成要素之一，是非常Basis的一个技术手段，所以我想对于它的一些基本情况应该不用太介绍了？</p>\n<h2 id=\"margin经常被用来做什么？\">margin经常被用来做什么？</h2>\n<ul>\n<li>让块元素水平居中；</li>\n<li>让元素之间留有舒适的留白；</li>\n<li>处理特殊的first或last，大家懂的？</li>\n<li>一些布局；</li>\n</ul>\n<h2 id=\"需要注意的地方：\">需要注意的地方：</h2>\n<ul>\n<li>margin折叠；</li>\n<li>margin的百分比值；</li>\n<li>margin的auto值；</li>\n<li>margin和相对偏移top, right, bottom, left的异同；</li>\n<li>IE6浮动双margin Bug；</li>\n<li>IE6浮动相邻元素3px Bug；</li>\n</ul>\n<p>看起来似乎有不少的知识点？恩，这些都是我们需要了解的，包括一些没有被列举出来的点。</p>\n<p>今天要讲的其实只是其中很少的一部分，恩，标题里有：keyword auto</p>\n","_id":"ogn3wo6gye4uo4cf","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于我","date":1385522100000,"categories":["d8m43jpfhfacq1xv"],"tags":["xliwxjtfgoucdgap","gx0cnqfub1iqaakd"],"content":"<h2 id=\"写点啥好呢？\">写点啥好呢？</h2>\n<p>帝都，一个充满人肉吸尘器的地方，我也是其中的一个。我在 <a href=\"http://www.qunar.com/\" target=\"_blank\" rel=\"external\">去哪儿网</a>，对去哪儿网感兴趣的童鞋，艾特我吧 <a href=\"http://weibo.com/doyoe\" target=\"_blank\" rel=\"external\">@doyoe</a>。</p>\n<h2 id=\"我的站点：\">我的站点：</h2>\n<ul>\n<li><a href=\"http://www.doyoe.com/\" target=\"_blank\" rel=\"external\">飘雨社区</a></li>\n<li><a href=\"http://blog.doyoe.com/\" target=\"_blank\" rel=\"external\">CSS探索之旅</a> <a href=\"https://github.com/doyoe/blog\" target=\"_blank\" rel=\"external\">View on GitHub</a></li>\n<li><a href=\"http://demo.doyoe.com/\" target=\"_blank\" rel=\"external\">Web前端实验室</a></li>\n<li><a href=\"http://css.doyoe.com/\" target=\"_blank\" rel=\"external\">CSS参考手册</a></li>\n</ul>\n","source":"_posts/about/joy.md","raw":"title: 关于我\ndate: 2013-11-27 11:15:00\ncategories: about\ntags: [简历, 自我介绍]\n---\n\n## 写点啥好呢？\n\n帝都，一个充满人肉吸尘器的地方，我也是其中的一个。我在 [去哪儿网](http://www.qunar.com/)，对去哪儿网感兴趣的童鞋，艾特我吧 [@doyoe](http://weibo.com/doyoe)。\n\n## 我的站点：\n* [飘雨社区](http://www.doyoe.com/)\n* [CSS探索之旅](http://blog.doyoe.com/) [View on GitHub](https://github.com/doyoe/blog)\n* [Web前端实验室](http://demo.doyoe.com/)\n* [CSS参考手册](http://css.doyoe.com/)","slug":"about/joy","updated":1419258604000,"excerpt":"","_id":"rx6aw1zvw7r273qs","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于我的博客","date":1385435700000,"categories":["d8m43jpfhfacq1xv"],"tags":["m2v9a6z04mt26whp","jlexiwv5xrtkat6k","60ubsndr1k7q0rb6"],"content":"<p>这是我的博客 <a href=\"http://blog.doyoe.com/\" target=\"_blank\" rel=\"external\">CSS探索之旅</a>，数据都托管在<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>。<br>所有的文章都是用<code>MarkDown</code>写的。</p>\n<p>之前博客已经挂了半年之久了，现在基于gitpress搭了一个懒人博客。搭建方式见月影博客 <a href=\"http://blog.silverna.org/~posts/gitpress/2013-11-17-gitpress.org%20%E5%9F%BA%E4%BA%8Egithub%E7%9A%84%E6%87%92%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F.md\" target=\"_blank\" rel=\"external\">gitpress 基于 github 的懒人博客系统</a>。</p>\n<p>以前的数据还保留着，会有选择性的迁移一些过来。</p>\n<p>这个形式的博客真心太适合我了，完全可以随意写，不用太care格式。</p>\n","source":"_posts/about/my-blog.md","raw":"title: 关于我的博客\ndate: 2013-11-26 11:15:00\ncategories: about\ntags: [博客介绍, 博客搭建, Hexo]\n---\n\n这是我的博客 [CSS探索之旅](http://blog.doyoe.com/)，数据都托管在[GitHub](https://github.com/)。\n所有的文章都是用`MarkDown`写的。\n\n之前博客已经挂了半年之久了，现在基于gitpress搭了一个懒人博客。搭建方式见月影博客 [gitpress 基于 github 的懒人博客系统](http://blog.silverna.org/~posts/gitpress/2013-11-17-gitpress.org%20%E5%9F%BA%E4%BA%8Egithub%E7%9A%84%E6%87%92%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F.md)。\n\n以前的数据还保留着，会有选择性的迁移一些过来。\n\n这个形式的博客真心太适合我了，完全可以随意写，不用太care格式。","slug":"about/my-blog","updated":1419258698000,"excerpt":"","_id":"i45vh5wjql4mpqqf","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之bug巡演","date":1386645300000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","d1thyqezlca2ax67"],"content":"<h2 id=\"我所知道的浏览器margin_bug\">我所知道的浏览器margin bug</h2>\n<ul>\n<li>IE6浮动双倍margin bug；</li>\n<li>IE6浮动相邻元素3px bug；</li>\n<li>IE6/7 clear引发的margin-top bug；</li>\n<li>待补充的有一堆</li>\n</ul>\n<h2 id=\"为bug生为bug死为bug欲仙欲死的日子\">为bug生为bug死为bug欲仙欲死的日子</h2>\n<p>各浏览器的实现差异或者由此而引入的错误，一直都是前端开发人员的梦魇。相信大多数的前端都为此而精疲力尽过，浏览器bug你所知有几？</p>\n<h2 id=\"IE6浮动双倍margin_bug\">IE6浮动双倍margin bug</h2>\n<p>这当是IE6最为经典的bug之一。高大上的前端，你肯定从未与其失之交臂过。</p>\n<h2 id=\"触发方式\">触发方式</h2>\n<ul>\n<li>元素被设置浮动</li>\n<li>元素在与浮动一致的方向上设置margin值</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>来看看详细的代码吧：</p>\n<h3 id=\"HTML\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>IE6下浮动方向上的margin值将会双倍于其指定值<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><h3 id=\"效果对比\">效果对比</h3>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-non-ie6.png\" alt=\"非IE6下浮动无双边距\"> （图一）</p>\n<p>图一 是非IE6下的效果</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-on-ie6.png\" alt=\"IE6下浮动双边距\"> （图二）</p>\n<p>图二 是IE6下的效果</p>\n<p>从图一和图二的对比，我们肉眼就可以发现区别。是的，IE6下左边的外边距变成了 <code>margin-left</code> 指定值的2倍，而其它浏览器下正常，这就是经典的IE6浮动元素双倍边距bug。来看看具体的例子：<code>DEMO1</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin.html\" target=\"_blank\" rel=\"external\">IE6浮动元素双倍margin bug重现</a></p>\n<p>很开心告诉你，问题要比这还更复杂一些，接着往下看。</p>\n<h2 id=\"同个浮动方向的元素只有第一个元素会double_margin\">同个浮动方向的元素只有第一个元素会double margin</h2>\n<p><code>double margin</code> 并不会发生在所有的浮动元素上，同个包含块内，在相同的浮动方向上，它只发生在第一个浮动元素上。</p>\n<p>用代码说话：</p>\n<h3 id=\"HTML-1\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>第一个float:left<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>第二个float:left<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>第三个float:left<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>CSS Code不变，加多2个浮动元素，再来看具体情况，有图有真相：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-only-first-child-on-ie6.png\" alt=\"同个浮动方向的元素只有第一个元素会double margin\"> （图三）</p>\n<p>看到图三结果一目了然，三个 <code>float:left</code> 的元素只有第一个元素才 <code>double margin</code> 了。用个例子来终结它：<code>DEMO2</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin-2.html\" target=\"_blank\" rel=\"external\">同个浮动方向的元素只有第一个元素会double margin</a></p>\n<h2 id=\"double_margin只发生在float:left时？\">double margin只发生在float:left时？</h2>\n<p>你觉得呢？结果当然不会是这样。在之前，我们只说过在同个浮动方向的第一个浮动元素会double margin，并没有说只有 <code>float:left</code> 才触发。</p>\n<p>我们将 <code>DEMO1</code> 的CSS简单改改，HTML不变</p>\n<h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">right</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>结果会是怎样呢？看 <code>图四</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-on-ie6-3.png\" alt=\"IE6 double margin也会发生在float:right时\"> （图四）</p>\n<p>在图四中，我们看到右侧的外边距明显比指定值 <code>margin-right:10px</code> 要大，恩，确实，它是20px，也double了。瞧瞧：<code>DEMO3</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin-3.html\" target=\"_blank\" rel=\"external\">IE6 double margin也会发生在float:right时</a></p>\n<h2 id=\"既有左浮动又有右浮动的情况将会是怎样呢？\">既有左浮动又有右浮动的情况将会是怎样呢？</h2>\n<p>我们先来将代码呈上：</p>\n<h3 id=\"HTML-2\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"a\"</span>&gt;</span>1 float:left<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"b\"</span>&gt;</span>2 float:left<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"c\"</span>&gt;</span>3 float:right<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"d\"</span>&gt;</span>4 float:right<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><h3 id=\"CSS-2\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"class\">.a</span>,<span class=\"id\">#demo</span> <span class=\"class\">.b</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"class\">.c</span>,<span class=\"id\">#demo</span> <span class=\"class\">.d</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">right</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>是的，你可能想到了，第一个左浮动元素和第一个右浮动元素都将会出现 double margin。来看 <code>图五</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-on-ie6-4.png\" alt=\"既有左浮动又有右浮动的情况\"> （图五）</p>\n<p>左右都 double margin 了，这看似挺复杂，其实为什么会这样，前面都讲得比较明白了，所以应该能理解？本例也奉上：<code>DEMO4</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin-4.html\" target=\"_blank\" rel=\"external\">复杂的double margin</a></p>\n<h2 id=\"double_margin_不仅仅出现在margin-left/right\">double margin 不仅仅出现在margin-left/right</h2>\n<p>和大多数其它 <code>margin</code> 特性一样，double margin 也受书写模式 <code>writing-mode</code> 影响。我们在开篇所说的触发条件之一 <code>元素在与浮动一致的方向设置margin值</code> ，其实并不完全精确。当 <code>writing-mode</code> 为纵向时，会发生 double margin 的方向也相应变成了纵向。</p>\n<p>当书写模式 <code>writing-mode</code> 纵向时，设置 <code>float:right</code> 时，会发生什么？来看代码：</p>\n<h3 id=\"HTML-3\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>书写模式改变双倍margin bug方向<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><h3 id=\"CSS-3\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">-webkit-writing-mode</span>:<span class=\"value\">vertical-rl</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">writing-mode</span>:<span class=\"value\">tb-rl</span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">right</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">10px</span> <span class=\"number\">0</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>CSS Code中，我们同时设置了 <code>margin-top/bottom</code> 的值都为 10px。你预期会 double 的方向是 top or bottom？不太确定？看到 <code>图六</code> 你就知道了：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-writing-mode-on-ie6.png\" alt=\"书写模式改变IE6浮动双倍margin bug方向\"> （图六）</p>\n<p>图六清晰的验证了 <code>writing-mode</code> 会影响 double margin 的方向；并且当设置了 <code>float:right</code> 时，只有 <code>margin-bottom</code> 会 double。看看示例吧：<code>DEMO5</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin-tbrl.html\" target=\"_blank\" rel=\"external\">书写模式改变IE6浮动双倍margin bug方向</a></p>\n<h2 id=\"float:left_时，_double_margin_的将会是_top_or_bottom？\"><code>float:left</code> 时， double margin 的将会是 top or bottom？</h2>\n<p>大家再猜猜，在书写模式为纵向时，设置了 <code>float:left</code>，结果又将会如何？</p>\n<p>我们只简单的将 <code>DEMO5</code> 中的CSS改成 <code>float:left</code> 其余不变，于是得到 <code>图七</code> 如下：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-margin-writing-mode-on-ie6-2.png\" alt=\"书写模式改变IE6浮动双倍margin bug方向\"> （图七）</p>\n<p>你会惊讶的发现，<code>margin-top/bottom</code> 两个方向都出现了 double，这真是一件好神奇的事，事实胜于雄辩：<code>DEMO6</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin-tbrl-2.html\" target=\"_blank\" rel=\"external\">书写模式纵向时margin-top/bottom都将double</a></p>\n<p>写到这，关于IE6浮动双倍margin bug就说的差不多了，包括触发方式，各种情景下的变化，还有解决方案。哦，解决方案貌似还没写…</p>\n<h2 id=\"fix_IE6浮动双倍margin_bug\">fix IE6浮动双倍margin bug</h2>\n<p>我们以 <code>DEMO1</code> 作为需要fix的case</p>\n<h3 id=\"给IE6在会_double_margin_的方向上设置小一倍的margin值，如下：\">给IE6在会 double margin 的方向上设置小一倍的margin值，如下：</h3>\n<h3 id=\"CSS-4\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">_margin-left</span>:<span class=\"value\"><span class=\"number\">5px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>恩，IE6的hack，就不再赘述了。不过这种处理方式有一个明显的缺陷，那就是不够灵活，无法通用。因为当标准 margin 值改变时，这个值就得变化。所以不推荐使用这种方式。</p>\n<h3 id=\"display:inline\">display:inline</h3>\n<h3 id=\"CSS-5\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">_display</span>:<span class=\"value\">inline</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>恩，仍然是only ie6的hack，不过这个方案更Cool，它不需要care margin值到底是什么，足够灵活。看具体的例子吧：<code>DEMO7</code> <a href=\"http://demo.doyoe.com/css/margin/bug/double-margin-fix.html\" target=\"_blank\" rel=\"external\">修复IE6浮动双倍margin bug</a>。至于为什么会有这种解法，我想只能问问微软的童鞋了。</p>\n<p>完全没想到，单一个双边距bug就写了这么长的篇幅，本打算一篇文章涵盖一堆bug，看来得分篇了。</p>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之bug巡演.md","raw":"title: margin系列之bug巡演\ndate: 2013-12-10 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin bug]\n---\n\n## 我所知道的浏览器margin bug\n\n* IE6浮动双倍margin bug；\n* IE6浮动相邻元素3px bug；\n* IE6/7 clear引发的margin-top bug；\n* 待补充的有一堆\n\n## 为bug生为bug死为bug欲仙欲死的日子\n\n各浏览器的实现差异或者由此而引入的错误，一直都是前端开发人员的梦魇。相信大多数的前端都为此而精疲力尽过，浏览器bug你所知有几？\n\n## IE6浮动双倍margin bug\n\n这当是IE6最为经典的bug之一。高大上的前端，你肯定从未与其失之交臂过。\n\n## 触发方式\n\n* 元素被设置浮动\n* 元素在与浮动一致的方向上设置margin值\n\n<!--more-->\n\n来看看详细的代码吧：\n\n### HTML\n\n    <div id=\"demo\">\n        <p>IE6下浮动方向上的margin值将会双倍于其指定值</p>\n    </div>\n\n### CSS\n\n    #demo p{\n        float:left;\n        margin-left:10px;\n    }\n\n### 效果对比\n\n![非IE6下浮动无双边距](http://demo.doyoe.com/css/margin/images/double-margin-non-ie6.png) （图一）\n\n图一 是非IE6下的效果\n\n![IE6下浮动双边距](http://demo.doyoe.com/css/margin/images/double-margin-on-ie6.png) （图二）\n\n图二 是IE6下的效果\n\n从图一和图二的对比，我们肉眼就可以发现区别。是的，IE6下左边的外边距变成了 `margin-left` 指定值的2倍，而其它浏览器下正常，这就是经典的IE6浮动元素双倍边距bug。来看看具体的例子：`DEMO1` [IE6浮动元素双倍margin bug重现](http://demo.doyoe.com/css/margin/bug/double-margin.html)\n\n很开心告诉你，问题要比这还更复杂一些，接着往下看。\n\n## 同个浮动方向的元素只有第一个元素会double margin\n\n`double margin` 并不会发生在所有的浮动元素上，同个包含块内，在相同的浮动方向上，它只发生在第一个浮动元素上。\n\n用代码说话：\n\n### HTML\n\n    <div id=\"demo\">\n        <p>第一个float:left</p>\n        <p>第二个float:left</p>\n        <p>第三个float:left</p>\n    </div>\n\nCSS Code不变，加多2个浮动元素，再来看具体情况，有图有真相：\n\n![同个浮动方向的元素只有第一个元素会double margin](http://demo.doyoe.com/css/margin/images/double-margin-only-first-child-on-ie6.png) （图三）\n\n看到图三结果一目了然，三个 `float:left` 的元素只有第一个元素才 `double margin` 了。用个例子来终结它：`DEMO2` [同个浮动方向的元素只有第一个元素会double margin](http://demo.doyoe.com/css/margin/bug/double-margin-2.html)\n\n## double margin只发生在float:left时？\n\n你觉得呢？结果当然不会是这样。在之前，我们只说过在同个浮动方向的第一个浮动元素会double margin，并没有说只有 `float:left` 才触发。\n\n我们将 `DEMO1` 的CSS简单改改，HTML不变\n\n### CSS\n\n    #demo p{\n        float:right;\n        margin-right:10px;\n    }\n\n结果会是怎样呢？看 `图四`：\n\n![IE6 double margin也会发生在float:right时](http://demo.doyoe.com/css/margin/images/double-margin-on-ie6-3.png) （图四）\n\n在图四中，我们看到右侧的外边距明显比指定值 `margin-right:10px` 要大，恩，确实，它是20px，也double了。瞧瞧：`DEMO3` [IE6 double margin也会发生在float:right时](http://demo.doyoe.com/css/margin/bug/double-margin-3.html)\n\n## 既有左浮动又有右浮动的情况将会是怎样呢？\n\n我们先来将代码呈上：\n\n### HTML\n\n    <div id=\"demo\">\n        <p class=\"a\">1 float:left</p>\n        <p class=\"b\">2 float:left</p>\n        <p class=\"c\">3 float:right</p>\n        <p class=\"d\">4 float:right</p>\n    </div>\n    \n### CSS\n\n    #demo .a,#demo .b{\n        float:left;\n        margin-left:10px;\n    }\n    #demo .c,#demo .d{\n        float:right;\n        margin-right:10px;\n    }\n\n是的，你可能想到了，第一个左浮动元素和第一个右浮动元素都将会出现 double margin。来看 `图五`：\n\n![既有左浮动又有右浮动的情况](http://demo.doyoe.com/css/margin/images/double-margin-on-ie6-4.png) （图五）\n\n左右都 double margin 了，这看似挺复杂，其实为什么会这样，前面都讲得比较明白了，所以应该能理解？本例也奉上：`DEMO4` [复杂的double margin](http://demo.doyoe.com/css/margin/bug/double-margin-4.html)\n\n## double margin 不仅仅出现在margin-left/right\n\n和大多数其它 `margin` 特性一样，double margin 也受书写模式 `writing-mode` 影响。我们在开篇所说的触发条件之一 `元素在与浮动一致的方向设置margin值` ，其实并不完全精确。当 `writing-mode` 为纵向时，会发生 double margin 的方向也相应变成了纵向。\n\n当书写模式 `writing-mode` 纵向时，设置 `float:right` 时，会发生什么？来看代码：\n\n### HTML\n\n    <div id=\"demo\">\n        <p>书写模式改变双倍margin bug方向</p>\n    </div>\n    \n### CSS\n\n    #demo{\n        -webkit-writing-mode:vertical-rl;\n        writing-mode:tb-rl;\n    }\n    #demo p{\n        float:right;\n        margin:10px 0;\n    }\n\nCSS Code中，我们同时设置了 `margin-top/bottom` 的值都为 10px。你预期会 double 的方向是 top or bottom？不太确定？看到 `图六` 你就知道了：\n\n![书写模式改变IE6浮动双倍margin bug方向](http://demo.doyoe.com/css/margin/images/double-margin-writing-mode-on-ie6.png) （图六）\n\n图六清晰的验证了 `writing-mode` 会影响 double margin 的方向；并且当设置了 `float:right` 时，只有 `margin-bottom` 会 double。看看示例吧：`DEMO5` [书写模式改变IE6浮动双倍margin bug方向](http://demo.doyoe.com/css/margin/bug/double-margin-tbrl.html)\n\n## `float:left` 时， double margin 的将会是 top or bottom？\n\n大家再猜猜，在书写模式为纵向时，设置了 `float:left`，结果又将会如何？\n\n我们只简单的将 `DEMO5` 中的CSS改成 `float:left` 其余不变，于是得到 `图七` 如下：\n\n![书写模式改变IE6浮动双倍margin bug方向](http://demo.doyoe.com/css/margin/images/double-margin-writing-mode-on-ie6-2.png) （图七）\n\n你会惊讶的发现，`margin-top/bottom` 两个方向都出现了 double，这真是一件好神奇的事，事实胜于雄辩：`DEMO6` [书写模式纵向时margin-top/bottom都将double](http://demo.doyoe.com/css/margin/bug/double-margin-tbrl-2.html)\n\n写到这，关于IE6浮动双倍margin bug就说的差不多了，包括触发方式，各种情景下的变化，还有解决方案。哦，解决方案貌似还没写...\n\n## fix IE6浮动双倍margin bug\n\n我们以 `DEMO1` 作为需要fix的case\n\n### 给IE6在会 double margin 的方向上设置小一倍的margin值，如下：\n\n### CSS\n\n    #demo p{\n        float:left;\n        margin-left:10px;\n        _margin-left:5px;\n    }\n\n恩，IE6的hack，就不再赘述了。不过这种处理方式有一个明显的缺陷，那就是不够灵活，无法通用。因为当标准 margin 值改变时，这个值就得变化。所以不推荐使用这种方式。\n\n### display:inline\n\n### CSS\n\n    #demo p{\n    \t_display:inline;\n        float:left;\n        margin-left:10px;\n    }\n\n恩，仍然是only ie6的hack，不过这个方案更Cool，它不需要care margin值到底是什么，足够灵活。看具体的例子吧：`DEMO7` [修复IE6浮动双倍margin bug](http://demo.doyoe.com/css/margin/bug/double-margin-fix.html)。至于为什么会有这种解法，我想只能问问微软的童鞋了。\n\n完全没想到，单一个双边距bug就写了这么长的篇幅，本打算一篇文章涵盖一堆bug，看来得分篇了。\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之bug巡演","updated":1419259153000,"excerpt":"<h2 id=\"我所知道的浏览器margin_bug\">我所知道的浏览器margin bug</h2>\n<ul>\n<li>IE6浮动双倍margin bug；</li>\n<li>IE6浮动相邻元素3px bug；</li>\n<li>IE6/7 clear引发的margin-top bug；</li>\n<li>待补充的有一堆</li>\n</ul>\n<h2 id=\"为bug生为bug死为bug欲仙欲死的日子\">为bug生为bug死为bug欲仙欲死的日子</h2>\n<p>各浏览器的实现差异或者由此而引入的错误，一直都是前端开发人员的梦魇。相信大多数的前端都为此而精疲力尽过，浏览器bug你所知有几？</p>\n<h2 id=\"IE6浮动双倍margin_bug\">IE6浮动双倍margin bug</h2>\n<p>这当是IE6最为经典的bug之一。高大上的前端，你肯定从未与其失之交臂过。</p>\n<h2 id=\"触发方式\">触发方式</h2>\n<ul>\n<li>元素被设置浮动</li>\n<li>元素在与浮动一致的方向上设置margin值</li>\n</ul>\n","_id":"krvosoe69d1gjb9a","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之bug巡演（三）","date":1387509300000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","d1thyqezlca2ax67"],"content":"<h2 id=\"IE8按钮margin_auto居中失效Bug\">IE8按钮margin auto居中失效Bug</h2>\n<p>你会猛然觉得，这是正解啊，因为 <code>button</code> 或者 <code>input type button类型</code> 的元素是 <code>inline-level</code> 的。</p>\n<p>不对啊，<code>button</code> 应该是 <code>inline</code> 的吧？哦，可能是 <code>inline-block</code> ？</p>\n<p>在这之前，我们似乎要先明确一些基础知识。</p>\n<h2 id=\"什么是_inline-level_元素？\">什么是 inline-level 元素？</h2>\n<a id=\"more\"></a>\n\n<p>要知道 <code>inline-level</code> 元素并不等于 <code>inline</code> 元素，也就是说 <code>行内级元素</code> 与 <code>行内元素</code> 是两个不同的概念。</p>\n<h3 id=\"inline-level_元素包含_display_值为：\"><code>inline-level</code> 元素包含 <code>display</code> 值为：</h3>\n<ul>\n<li>inline</li>\n<li>inline-block</li>\n<li>inline-table</li>\n<li>inline-flex</li>\n<li>other inline-*</li>\n</ul>\n<p>以上情况时，元素可被称之为 <code>inline-level</code> 元素，但不都是 <code>inline</code> 元素。</p>\n<h2 id=\"什么是_block-level_元素？\">什么是 block-level 元素？</h2>\n<p><code>block-level</code> 指的是 <code>display</code> 值为 <code>block</code> 的元素吗？我知道不少人一直有这样的认知，不过这不完全准确。</p>\n<h3 id=\"block-level_元素包含_display_值为：\"><code>block-level</code> 元素包含 <code>display</code> 值为：</h3>\n<ul>\n<li>block</li>\n<li>list-item</li>\n<li>table</li>\n<li>table-*</li>\n<li>flex</li>\n<li>如果position既不是static也不是relative、float不是none或者元素是根元素，当display:inline-table时，display的计算值为table；当display值为 inline | inline-block | run-in | table-* 时，display的计算值为block</li>\n</ul>\n<p>有如上情况时的元素均被称之为 <code>block-level</code> 元素。同时 <code>block-level</code> 和 <code>block</code> 也不是同一个概念，所以如果你认为 <code>display</code> 值为 <code>list-item</code> 的 li 不是 块级元素，那就错了。</p>\n<p>看到这里，你对 <code>块级元素</code>，<code>块元素</code>，<code>行内级元素</code>，<code>行内元素</code> 这个4个概念，应该已经有了比较清晰的了解？</p>\n<h2 id=\"margin_keyword_auto只能应用在常规流中的_block-level_元素上\">margin keyword auto只能应用在常规流中的 block-level 元素上</h2>\n<ul>\n<li>当一个块级元素定义了 <code>position</code> 值为非 <code>static</code> 和 <code>relative</code> 之外的值时，margin-right/left auto 的计算值为0；</li>\n<li>当一个块级元素定义了 <code>float</code> 值为非 <code>none</code> 之外的值时，margin-right/left auto 的计算值为0；</li>\n<li>非块级元素的margin-right/left auto 的计算值为0；</li>\n</ul>\n<p>计算值为0，即说明其应用使用值的意图失败。所以在有如上情形的场景中，都无法使用 <code>auto</code> 来实现水平居中。同时也说明了，只有 <code>normal flow</code> 的 <code>block-level</code> 才能应用 margin keyword auto。</p>\n<h2 id=\"margin可以应用于所有元素吗？\">margin可以应用于所有元素吗？</h2>\n<p>这显然不行。准确的说：margin可以应用在除某些table-*元素和某些行内元素之外的所有元素上。</p>\n<h3 id=\"和margin亲近的table-*系元素\">和margin亲近的table-*系元素</h3>\n<ul>\n<li>table</li>\n<li>inline-table</li>\n<li>table-caption</li>\n</ul>\n<p>除了 <code>display</code> 值为以上3种之外的 <code>table系</code> 元素，都不能应用 <code>margin</code> ，比如：th, td。</p>\n<h3 id=\"和margin亲近的_inline-level_元素\">和margin亲近的 inline-level 元素</h3>\n<p>我之前面试的时候常会问候选人，行内元素不能设置宽高对吗？大部分人会告诉我说是；然后我又会问，那为什么 <code>img</code> 元素可以设置宽高呢？有人会告诉我，因为 <code>img</code> 是个特殊的元素？接着我又会问题，<code>img</code> 是如何特殊的？然后，然后就没然后了，因为没声音了。</p>\n<p>恩，<code>img</code> 确实是个特殊的元素。它特殊在哪里？它的特殊就在于它是一个行内置换元素。</p>\n<p>所有的置换元素都可以设置 <code>margin</code> 属性，并且可以设置宽高，这就是为什么 <code>img</code> 是行内元素却可以设置 <code>width</code> 和 <code>height</code>。</p>\n<h3 id=\"什么是置换元素（Replaced_elements）？\">什么是置换元素（Replaced elements）？</h3>\n<p>一个元素拥有内在的二维属性，其宽高属性受外部资源影响，默认拥有CSS格式，这样的元素被称为置换元素。</p>\n<p>意思就是说置换元素的宽高不完全由CSS决定，还受其自身内容和外部资源所影响。</p>\n<p>举个例子来说，仍然说 <code>img</code> 元素吧，你会发现，如果你 <code>src</code> 进来不同尺寸的资源，那么在 viewport 上显示的图片宽高也是不同的，也就是说 <code>img</code> 元素的宽高会受外部资源影响。</p>\n<p>再说说 <code>input</code> 元素，随便在页面上扔一个input，你都能发现它拥有一个默认的宽高，这就是它所具有的内在二维宽高属性，并且该类元素会受UA影响，不同UA下所呈现外观会有不同。</p>\n<h3 id=\"常见的置换元素有哪些？\">常见的置换元素有哪些？</h3>\n<p>img, object, button, input, textarea, select等</p>\n<h3 id=\"行内非置换元素真的不能应用margin吗？\">行内非置换元素真的不能应用margin吗？</h3>\n<p>什么是非置换元素？除了置换元素之外的元素，我想将这样的元素称之为非置换元素是没有大碍的。</p>\n<p>那么行内非置换元素真的无法设置 <code>margin</code> 吗？我想在工作中你一定碰到过很多这样的场景，给一个 <code>a</code> 或者 <code>span</code> 定义间隙。这时我们写：</p>\n<h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"tag\">span</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">5px</span> <span class=\"number\">10px</span></span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>结果发现 <code>span</code> 的水平方向上的 <code>margin</code> 定义生效了，但垂直方向上的 <code>margin</code> 定义却没被应用。</p>\n<p>是的，这就是行内非置换元素使用 <code>margin</code> 时的表征，所以对各种特性的理解，在让自己的代码更有效上是大有裨益的。</p>\n<h2 id=\"回归正题\">回归正题</h2>\n<p>我们本来是想说IE8按钮margin auto居中失效Bug的，扯了不少题外话。</p>\n<p>我们知道 margin keyword auto 不能应用在处于常规流中的 block-level 之外的元素上，所以我有这样的一段代码：</p>\n<h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"tag\">button</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\">block</span></span>;<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">auto</span></span>;<span class=\"rule\">}</span></span>\n</code></pre><h3 id=\"HTML\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>恩，我们将 <code>button</code> 显式的转换为了 <code>block</code>，同时我们知道 <code>button</code> 作为置换元素，本身具备内在宽高，也就是说这时，我只需要加上 <code>margin:auto</code> ，该按钮就应该在其包含块里水平居中。</p>\n<p>是的，所有浏览器都和预期是一样，实现了水平居中，但是却出现了奇葩的IE8，完全无效，甚至不如原始社会的IE6。来看看示例 <code>DEMO1</code>：<a href=\"http://demo.doyoe.com/css/margin/bug/button-auto-margin-bug.html\" target=\"_blank\" rel=\"external\">IE8按钮margin auto居中失效Bug</a></p>\n<p>通过以上例子，你有没有突然感觉到，如果要让一个置换元素在包含块中水平居中，出乎预料的简单，只需要 <code>display:block;margin:auto;</code> 即可。</p>\n<h2 id=\"注意事项\">注意事项</h2>\n<p>令人意外的是，只有 <code>button</code> 和 input type 为 button 相关元素的时候，在IE8中才会水平居中失效；如: <code>input type text</code> 或 <code>img</code> 时，margin keyword auto 运作正常。</p>\n<h2 id=\"解决方案\">解决方案</h2>\n<ul>\n<li>给其显示的定义宽度</li>\n<li>不改变其display值，包含块text-align:center</li>\n<li>其它水平居中方案，如：absolute + 负margin</li>\n</ul>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之bug巡演（三）.md","raw":"title: margin系列之bug巡演（三）\ndate: 2013-12-20 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin bug]\n---\n\n## IE8按钮margin auto居中失效Bug\n\n你会猛然觉得，这是正解啊，因为 `button` 或者 `input type button类型` 的元素是 `inline-level` 的。\n\n不对啊，`button` 应该是 `inline` 的吧？哦，可能是 `inline-block` ？\n\n在这之前，我们似乎要先明确一些基础知识。\n\n## 什么是 inline-level 元素？\n\n<!--more-->\n\n要知道 `inline-level` 元素并不等于 `inline` 元素，也就是说 `行内级元素` 与 `行内元素` 是两个不同的概念。\n\n### `inline-level` 元素包含 `display` 值为：\n\n* inline\n* inline-block\n* inline-table\n* inline-flex\n* other inline-*\n\n以上情况时，元素可被称之为 `inline-level` 元素，但不都是 `inline` 元素。\n\n## 什么是 block-level 元素？\n\n`block-level` 指的是 `display` 值为 `block` 的元素吗？我知道不少人一直有这样的认知，不过这不完全准确。\n\n### `block-level` 元素包含 `display` 值为：\n\n* block\n* list-item\n* table\n* table-*\n* flex\n* 如果position既不是static也不是relative、float不是none或者元素是根元素，当display:inline-table时，display的计算值为table；当display值为 inline | inline-block | run-in | table-* 时，display的计算值为block\n\n有如上情况时的元素均被称之为 `block-level` 元素。同时 `block-level` 和 `block` 也不是同一个概念，所以如果你认为 `display` 值为 `list-item` 的 li 不是 块级元素，那就错了。\n\n看到这里，你对 `块级元素`，`块元素`，`行内级元素`，`行内元素` 这个4个概念，应该已经有了比较清晰的了解？\n\n## margin keyword auto只能应用在常规流中的 block-level 元素上\n\n* 当一个块级元素定义了 `position` 值为非 `static` 和 `relative` 之外的值时，margin-right/left auto 的计算值为0；\n* 当一个块级元素定义了 `float` 值为非 `none` 之外的值时，margin-right/left auto 的计算值为0；\n* 非块级元素的margin-right/left auto 的计算值为0；\n\n计算值为0，即说明其应用使用值的意图失败。所以在有如上情形的场景中，都无法使用 `auto` 来实现水平居中。同时也说明了，只有 `normal flow` 的 `block-level` 才能应用 margin keyword auto。\n\n## margin可以应用于所有元素吗？\n\n这显然不行。准确的说：margin可以应用在除某些table-*元素和某些行内元素之外的所有元素上。\n\n### 和margin亲近的table-*系元素\n\n* table\n* inline-table\n* table-caption\n\n除了 `display` 值为以上3种之外的 `table系` 元素，都不能应用 `margin` ，比如：th, td。\n\n### 和margin亲近的 inline-level 元素\n\n我之前面试的时候常会问候选人，行内元素不能设置宽高对吗？大部分人会告诉我说是；然后我又会问，那为什么 `img` 元素可以设置宽高呢？有人会告诉我，因为 `img` 是个特殊的元素？接着我又会问题，`img` 是如何特殊的？然后，然后就没然后了，因为没声音了。\n\n恩，`img` 确实是个特殊的元素。它特殊在哪里？它的特殊就在于它是一个行内置换元素。\n\n所有的置换元素都可以设置 `margin` 属性，并且可以设置宽高，这就是为什么 `img` 是行内元素却可以设置 `width` 和 `height`。\n\n### 什么是置换元素（Replaced elements）？\n\n一个元素拥有内在的二维属性，其宽高属性受外部资源影响，默认拥有CSS格式，这样的元素被称为置换元素。\n\n意思就是说置换元素的宽高不完全由CSS决定，还受其自身内容和外部资源所影响。\n\n举个例子来说，仍然说 `img` 元素吧，你会发现，如果你 `src` 进来不同尺寸的资源，那么在 viewport 上显示的图片宽高也是不同的，也就是说 `img` 元素的宽高会受外部资源影响。\n\n再说说 `input` 元素，随便在页面上扔一个input，你都能发现它拥有一个默认的宽高，这就是它所具有的内在二维宽高属性，并且该类元素会受UA影响，不同UA下所呈现外观会有不同。\n\n### 常见的置换元素有哪些？\n\nimg, object, button, input, textarea, select等\n\n### 行内非置换元素真的不能应用margin吗？\n\n什么是非置换元素？除了置换元素之外的元素，我想将这样的元素称之为非置换元素是没有大碍的。\n\n那么行内非置换元素真的无法设置 `margin` 吗？我想在工作中你一定碰到过很多这样的场景，给一个 `a` 或者 `span` 定义间隙。这时我们写：\n\n### CSS\n\n    span{margin:5px 10px;}\n\n结果发现 `span` 的水平方向上的 `margin` 定义生效了，但垂直方向上的 `margin` 定义却没被应用。\n\n是的，这就是行内非置换元素使用 `margin` 时的表征，所以对各种特性的理解，在让自己的代码更有效上是大有裨益的。\n\n## 回归正题\n\n我们本来是想说IE8按钮margin auto居中失效Bug的，扯了不少题外话。\n\n我们知道 margin keyword auto 不能应用在处于常规流中的 block-level 之外的元素上，所以我有这样的一段代码：\n\n### CSS\n\n    button{display:block;margin:auto;}\n\n### HTML\n    <div id=\"demo\">\n        <button>按钮</button>\n    </div>\n\n恩，我们将 `button` 显式的转换为了 `block`，同时我们知道 `button` 作为置换元素，本身具备内在宽高，也就是说这时，我只需要加上 `margin:auto` ，该按钮就应该在其包含块里水平居中。\n\n是的，所有浏览器都和预期是一样，实现了水平居中，但是却出现了奇葩的IE8，完全无效，甚至不如原始社会的IE6。来看看示例 `DEMO1`：[IE8按钮margin auto居中失效Bug](http://demo.doyoe.com/css/margin/bug/button-auto-margin-bug.html)\n\n通过以上例子，你有没有突然感觉到，如果要让一个置换元素在包含块中水平居中，出乎预料的简单，只需要 `display:block;margin:auto;` 即可。\n\n## 注意事项\n\n令人意外的是，只有 `button` 和 input type 为 button 相关元素的时候，在IE8中才会水平居中失效；如: `input type text` 或 `img` 时，margin keyword auto 运作正常。\n\n## 解决方案\n\n* 给其显示的定义宽度\n* 不改变其display值，包含块text-align:center\n* 其它水平居中方案，如：absolute + 负margin\n\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之bug巡演（三）","updated":1419259300000,"excerpt":"<h2 id=\"IE8按钮margin_auto居中失效Bug\">IE8按钮margin auto居中失效Bug</h2>\n<p>你会猛然觉得，这是正解啊，因为 <code>button</code> 或者 <code>input type button类型</code> 的元素是 <code>inline-level</code> 的。</p>\n<p>不对啊，<code>button</code> 应该是 <code>inline</code> 的吧？哦，可能是 <code>inline-block</code> ？</p>\n<p>在这之前，我们似乎要先明确一些基础知识。</p>\n<h2 id=\"什么是_inline-level_元素？\">什么是 inline-level 元素？</h2>\n","_id":"qc0hk4qx9rz8bylv","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之与相对偏移的异同","date":1385954100000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","nynebqeew1itqkff"],"content":"<h2 id=\"也许我们是一样的\">也许我们是一样的</h2>\n<p>可能大家都用会 <code>margin</code> 或者相对偏移的 <code>top, right, bottom, left</code> 来做一些类似元素偏移的事，其实我也会。这回我们只聊 <code>relative</code> 下的 <code>top, right, bottom, left</code> 。</p>\n<p>比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：</p>\n<h3 id=\"Case_1:\">Case 1:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.margin-top</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Case_2:\">Case 2:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.relative-top</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:\">HTML:</h3>\n<figure class=\"highlight HTML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"margin-top\"</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"relative-top\"</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm\" target=\"_blank\" rel=\"external\">margin-top vs. relative top</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"其实它们真的有相似的地方\">其实它们真的有相似的地方</h2>\n<p>从上面的例子，可以发现不论是 <code>margin-top</code> 还是 <code>relative top</code> 都是以自身作为参照物进行偏移的。</p>\n<p>顺带说一下 <code>absolute</code> 偏移相对的是包含块，并且其偏移值是从包含块的 <code>padding</code> 区域开始计算。</p>\n<h2 id=\"但它们真的不一样，我们来看看规范怎么说：\">但它们真的不一样，我们来看看规范怎么说：</h2>\n<h3 id=\"margin:\">margin:</h3>\n<blockquote>\n<p>原文：Margins in CSS serve to add both horizontal and vertical space between boxes.</p>\n<p>翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。</p>\n</blockquote>\n<h3 id=\"top,_right,_bottom,_left:\">top, right, bottom, left:</h3>\n<blockquote>\n<p>原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.</p>\n<p>翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。</p>\n</blockquote>\n<p>意思很明白，<code>margin</code> 是用来增加自身与它人之间的空白，而 <code>top, right, bottom, left</code> 是用来对自身进行排版，作用完全不同。</p>\n<p>也就是说 <code>margin</code> 是互动的，因为它要影响它人；而 <code>top, right, bottom, left</code>是孤独的，它只是自己一个人玩，不影响它人。</p>\n<h2 id=\"回到之前那个例子\">回到之前那个例子</h2>\n<p>在 <code>DEMO1</code> 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。</p>\n<p>margin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。</p>\n<p>top的case: 让该div距离其包含块顶部边缘50px，因为是 <code>relative</code> ，所以这里是距离div自己的顶部边缘。</p>\n<h2 id=\"我们大胆假设一下\">我们大胆假设一下</h2>\n<p>如果我们设置 <code>margin-bottom</code> 和 <code>bottom</code> 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：</p>\n<h3 id=\"Case_1:-1\">Case 1:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.margin-bottom</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Case_2:-1\">Case 2:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.relative-bottom</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> relative</span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">bottom</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:-1\">HTML:</h3>\n<figure class=\"highlight HTML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"margin-bottom\"</span>&gt;</span>我是margin-bottom:50px<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"relative-bottom\"</span>&gt;</span>我是relative bottom:50px<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>验证猜想的时刻到了，来看看 <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm\" target=\"_blank\" rel=\"external\">对margin-bottom和bottom的表现猜想</a></p>\n<p>结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？</p>\n<p>前面我们说过 <code>margin</code> 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 <code>bottom</code>会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？</p>\n<p>还有一个细节你注意到了吗？<code>bottom</code> 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 <code>top, right, bottom, left</code> 是孤独的，它只是自己一个人玩，不影响它人。</p>\n<h2 id=\"孤独患者\">孤独患者</h2>\n<p>我们将 <code>DEMO1</code> 稍改改，为其加上一点上下文，再看看结果：</p>\n<h3 id=\"Case_1:-1\">Case 1:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.margin-top</span> <span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Case_2:-1\">Case 2:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.relative-top</span> <span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:-2\">HTML:</h3>\n<figure class=\"highlight HTML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"margin-top\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">\t\t我是一段随便什么上下文</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"relative-top\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">\t\t我是一段随便什么上下文</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>迫不及待的要看看实际例子了，不是么？<code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm\" target=\"_blank\" rel=\"external\">再次验证一下top, right, bottom, left是孤独患者</a></p>\n<p>至此可以再次说明 <code>top, right, bottom, left</code> 真的和其上下文一毛钱关系都没有，绝对的孤单患者。</p>\n<p>所以 <code>margin</code> 和 <code>top, right, bottom, left</code> 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.</p>\n<h2 id=\"似乎还漏了点啥\">似乎还漏了点啥</h2>\n<p>差点就这么结篇了，想起还有点遗漏的地方。</p>\n<p>当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top = -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。</p>\n<p>好吧，不得不再写个例子：<code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/margin/top-right-bottom-left.htm\" target=\"_blank\" rel=\"external\">top, right, bottom, left详述</a></p>\n<p>至于margin，就留给大家思考一下也不错 ^_^</p>\n<p>enjoy it again.</p>\n<h2 id=\"可参考：\">可参考：</h2>\n<ul>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#the-margin-properties\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-position/#box-offsets-trbl\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-position/#box-offsets-trbl</a></li>\n</ul>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之与相对偏移的异同.md","raw":"title: margin系列之与相对偏移的异同\ndate: 2013-12-02 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin偏移]\n---\n\n## 也许我们是一样的\n\n可能大家都用会 `margin` 或者相对偏移的 `top, right, bottom, left` 来做一些类似元素偏移的事，其实我也会。这回我们只聊 `relative` 下的 `top, right, bottom, left` 。\n\n比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：\n\n### Case 1:\n\n```css\n#demo .margin-top{\n\tmargin-top: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-top{\n\tposition:relative;\n\ttop: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<div class=\"margin-top\">我是margin-top:50px</div>\n\t<div class=\"relative-top\">我是relative top:50px</div>\n</div>\n```\n\n上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 `DEMO1`: [margin-top vs. relative top](http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm)\n\n<!--more-->\n\n## 其实它们真的有相似的地方\n\n从上面的例子，可以发现不论是 `margin-top` 还是 `relative top` 都是以自身作为参照物进行偏移的。\n\n顺带说一下 `absolute` 偏移相对的是包含块，并且其偏移值是从包含块的 `padding` 区域开始计算。\n\n## 但它们真的不一样，我们来看看规范怎么说：\n\n### margin:\n> 原文：Margins in CSS serve to add both horizontal and vertical space between boxes.\n\n> 翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。\n\n### top, right, bottom, left:\n> 原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.\n  \n> 翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。\n\n意思很明白，`margin` 是用来增加自身与它人之间的空白，而 `top, right, bottom, left` 是用来对自身进行排版，作用完全不同。\n\n也就是说 `margin` 是互动的，因为它要影响它人；而 `top, right, bottom, left `是孤独的，它只是自己一个人玩，不影响它人。\n\n## 回到之前那个例子\n在 `DEMO1` 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。\n\nmargin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。\n\ntop的case: 让该div距离其包含块顶部边缘50px，因为是 `relative` ，所以这里是距离div自己的顶部边缘。\n\n## 我们大胆假设一下\n如果我们设置 `margin-bottom` 和 `bottom` 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：\n\n### Case 1:\n\n```css\n#demo .margin-bottom{\n\tmargin-bottom: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-bottom{\n\tposition: relative;\n\tbottom: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<p class=\"margin-bottom\">我是margin-bottom:50px</p>\n\t<p class=\"relative-bottom\">我是relative bottom:50px</p>\n</div>\n```\n\n验证猜想的时刻到了，来看看 `DEMO2`: [对margin-bottom和bottom的表现猜想](http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm)\n\n结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？\n\n前面我们说过 `margin` 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 `bottom`会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？\n\n还有一个细节你注意到了吗？`bottom` 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 `top, right, bottom, left` 是孤独的，它只是自己一个人玩，不影响它人。\n\n## 孤独患者\n我们将 `DEMO1` 稍改改，为其加上一点上下文，再看看结果：\n\n### Case 1:\n\n```css\n#demo .margin-top p{\n\tmargin-top: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-top p{\n\tposition:relative;\n\ttop: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<div class=\"margin-top\">\n\t\t<p>我是margin-top:50px</p>\n\t\t我是一段随便什么上下文\n\t</div>\n\t<div class=\"relative-top\">\n\t\t<p>我是relative top:50px</p>\n\t\t我是一段随便什么上下文\n\t</div>\n</div>\n```\n\n迫不及待的要看看实际例子了，不是么？`DEMO3`: [再次验证一下top, right, bottom, left是孤独患者](http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm)\n\n至此可以再次说明 `top, right, bottom, left` 真的和其上下文一毛钱关系都没有，绝对的孤单患者。\n\n所以 `margin` 和 `top, right, bottom, left ` 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.\n\n## 似乎还漏了点啥\n差点就这么结篇了，想起还有点遗漏的地方。\n\n当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top = -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。\n\n好吧，不得不再写个例子：`DEMO4`: [top, right, bottom, left详述](http://demo.doyoe.com/css/margin/top-right-bottom-left.htm)\n\n至于margin，就留给大家思考一下也不错 ^_^\n\nenjoy it again.\n\n## 可参考：\n\n* http://dev.w3.org/csswg/css-box/#the-margin-properties\n* http://dev.w3.org/csswg/css-position/#box-offsets-trbl\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之与相对偏移的异同","updated":1419259074000,"excerpt":"<h2 id=\"也许我们是一样的\">也许我们是一样的</h2>\n<p>可能大家都用会 <code>margin</code> 或者相对偏移的 <code>top, right, bottom, left</code> 来做一些类似元素偏移的事，其实我也会。这回我们只聊 <code>relative</code> 下的 <code>top, right, bottom, left</code> 。</p>\n<p>比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：</p>\n<h3 id=\"Case_1:\">Case 1:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.margin-top</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Case_2:\">Case 2:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"class\">.relative-top</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:\">HTML:</h3>\n<figure class=\"highlight HTML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"margin-top\"</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"relative-top\"</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm\" target=\"_blank\" rel=\"external\">margin-top vs. relative top</a></p>\n","_id":"htqok3nybzzjtqsv","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之bug巡演（二）","date":1387250100000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","d1thyqezlca2ax67"],"content":"<h2 id=\"IE6/7_clear引发的margin-top_bug\">IE6/7 clear引发的margin-top bug</h2>\n<p>我知道，这是一个被谈及较少的bug，但我几乎可以肯定你在遇见过的同时并没有把它当成是一个bug。</p>\n<h2 id=\"w3c关于_clear_特性的描述\">w3c关于 clear 特性的描述</h2>\n<p>设置了 <code>clear</code> 为非 <code>none</code> 值的元素，其顶部 <code>border</code> 边界在垂直方向不允许出现在之前的浮动元素底部 <code>margin</code> 之上。</p>\n<a id=\"more\"></a>\n\n<p>什么意思呢？用段代码来阐述：</p>\n<h3 id=\"HTML\">HTML</h3>\n<pre><code>&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"a\"</span>&gt;float:left&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"b\"</span>&gt;clear:left&lt;/<span class=\"keyword\">div</span>&gt;\n</code></pre><h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"class\">.a</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">30px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">20px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.b</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">clear</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">30px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\">-<span class=\"number\">30px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>如上代码，你认为 <code>.b</code> 是否会相对自身向上偏移 30px 呢？然后盖住 <code>.a</code> 底部 10px？如果你真这么猜想，那就错了。</p>\n<p>来看上述代码，我们会得到什么样的结果，如 <code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/clear-margin.png\" alt=\"clear margin\">（图一）</p>\n<p>恩，你觉得这可能会是落后浏览器才这样，比如IE6/7。很高兴的告诉你，其实高级浏览器才这样，IE6/7的表现会是之前你猜想的那样，如下 <code>图二</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/clear-margin-on-ie67.png\" alt=\"clear margin\">（图二）</p>\n<p>不论你相信与否，看个例子你就明白了 <code>DEMO1</code>：<a href=\"http://demo.doyoe.com/css/margin/bug/clear-margin.html\" target=\"_blank\" rel=\"external\">clear margin 猜想</a>，你会发现就算将 <code>margin-top</code> 去掉，<code>.b</code> 的位置也丝毫不会改变。</p>\n<h2 id=\"为什么会这样？\">为什么会这样？</h2>\n<p>我们已经说过设置了 <code>clear</code> 为非 <code>none</code> 值的元素其顶部 <code>border</code> 边界不允许出现在之前浮动元素的底部margin边界之上。也就是说必须在垂直方向上递次堆叠却不能重合。</p>\n<p>所以说高级浏览器是遵循w3c规范的，而IE6/7的实现明显有悖该规则。</p>\n<p>虽然拥有 <code>clear</code> 特性的元素其 <code>border</code> 顶部边界不允许超越之前浮动元素的底部margin边界之上，但是其margin可以和之前浮动元素的任何区域重合。我们稍微改下之前代码：</p>\n<h3 id=\"HTML-1\">HTML</h3>\n<pre><code>&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"a\"</span>&gt;float:left&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"b\"</span>&gt;clear:left&lt;/<span class=\"keyword\">div</span>&gt;\n</code></pre><h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"class\">.a</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">30px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">20px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.b</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">clear</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">30px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"><span class=\"number\">50px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>我们将 <code>.b</code> 的 <code>margin-top</code> 修改为一个正值，能得到如下 <code>图三</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/clear-margin-2.png\" alt=\"clear margin\">（图三）</p>\n<p>图中的黄色区域是 <code>.b</code> 的 <code>margin-top</code>，你会发现，它可以和 <code>.a</code> 的任何区域重合。同时，你也可以发现 <code>图三</code> 和 <code>图一</code> 居然是一样的效果，<code>.b</code> 的实际位置都没变化过。来看例子 <code>DEMO2</code>：<a href=\"http://demo.doyoe.com/css/margin/bug/clear-margin-2.html\" target=\"_blank\" rel=\"external\">clear margin 验证</a></p>\n<p>这是否说明拥有 <code>clear</code> 特性的元素对其之前的浮动元素没有任何影响？因为不论是正值还是负值，其位置都不会发生变化。</p>\n<p>如果你这样想，那你就又错了。</p>\n<h2 id=\"拥有clear特性的元素其margin紧邻之前的浮动元素依然有效\">拥有clear特性的元素其margin紧邻之前的浮动元素依然有效</h2>\n<p>是的，在某个临界值，这一切会发生改变，并非全然无效。</p>\n<p>这个临界值是什么？</p>\n<p>临界值是包含块内浮动元素的实际高度，即浮动元素的 margin + border + padding + height，拿我们的 <code>DEMO2</code> 来详述：</p>\n<p><code>DEMO2</code> 中的浮动元素 <code>.a</code> 的实际高度为 30 + 20*2 = 70px，也就说当 <code>.b</code> 的 <code>margin-top</code> 大于 70px 时，超过的部分将会使得 <code>.b</code> 发生偏移。</p>\n<h3 id=\"CSS-2\">CSS</h3>\n<pre><code><span class=\"class\">.b</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">clear</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">30px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>我们将 <code>DEMO2</code> 中的 <code>margin-top</code> 改成 100px，再看看具体情况 <code>DEMO3</code>：<a href=\"http://demo.doyoe.com/css/margin/bug/clear-margin-3.html\" target=\"_blank\" rel=\"external\">clear margin 验证2</a>，你可以手动的修改其 <code>margin-top</code> 值，看看临界值是否如前所述。</p>\n<h2 id=\"解决方案\">解决方案</h2>\n<p>IE6/7下由 <code>clear</code> 特性引发的 <code>margin-top</code> bug，并没有像 double margin 那样的万精油 <code>display:inline</code> 解决方案，所以需要寻求的是让IE6/7和其它浏览器绕过此问题来进行解决。</p>\n<p>例如：</p>\n<ul>\n<li>尽量避免为设置了 <code>clear</code> 为非 <code>none</code> 值的元素定义margin-top；</li>\n<li>如果必须，可以将拥有 <code>clear</code> 特性的元素作为容器，在其子元素上设置margin-top；</li>\n<li>视情况换成padding-top；</li>\n</ul>\n<h2 id=\"要注意的问题\">要注意的问题</h2>\n<p><code>.a</code> 和 <code>.b</code> 需要在处在同一个块级上下文内，或者其包含块拥有 <code>padding-top/border-top</code>，否则临界值情况将失效，不过任何IE目前都不需要此前置条件。用IE和非IE查看 <code>DEMO4</code>：<a href=\"http://demo.doyoe.com/css/margin/bug/clear-margin-4.html\" target=\"_blank\" rel=\"external\">clear margin 验证3</a></p>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之bug巡演（二）.md","raw":"title: margin系列之bug巡演（二）\ndate: 2013-12-17 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin bug]\n---\n\n## IE6/7 clear引发的margin-top bug\n\n我知道，这是一个被谈及较少的bug，但我几乎可以肯定你在遇见过的同时并没有把它当成是一个bug。\n\n## w3c关于 clear 特性的描述\n\n设置了 `clear` 为非 `none` 值的元素，其顶部 `border` 边界在垂直方向不允许出现在之前的浮动元素底部 `margin` 之上。\n\n<!--more-->\n\n什么意思呢？用段代码来阐述：\n\n### HTML\n\n    <div class=\"a\">float:left</div>\n    <div class=\"b\">clear:left</div>\n\n### CSS\n\n    .a{\n        float:left;\n        height:30px;\n        margin:20px;\n    }\n    .b{\n        clear:left;\n        height:30px;\n        margin-top:-30px;\n    }\n\n如上代码，你认为 `.b` 是否会相对自身向上偏移 30px 呢？然后盖住 `.a` 底部 10px？如果你真这么猜想，那就错了。\n\n来看上述代码，我们会得到什么样的结果，如 `图一`：\n\n![clear margin](http://demo.doyoe.com/css/margin/images/clear-margin.png)（图一）\n\n恩，你觉得这可能会是落后浏览器才这样，比如IE6/7。很高兴的告诉你，其实高级浏览器才这样，IE6/7的表现会是之前你猜想的那样，如下 `图二`：\n\n![clear margin](http://demo.doyoe.com/css/margin/images/clear-margin-on-ie67.png)（图二）\n\n不论你相信与否，看个例子你就明白了 `DEMO1`：[clear margin 猜想](http://demo.doyoe.com/css/margin/bug/clear-margin.html)，你会发现就算将 `margin-top` 去掉，`.b` 的位置也丝毫不会改变。\n\n## 为什么会这样？\n\n我们已经说过设置了 `clear` 为非 `none` 值的元素其顶部 `border` 边界不允许出现在之前浮动元素的底部margin边界之上。也就是说必须在垂直方向上递次堆叠却不能重合。\n\n所以说高级浏览器是遵循w3c规范的，而IE6/7的实现明显有悖该规则。\n\n虽然拥有 `clear` 特性的元素其 `border` 顶部边界不允许超越之前浮动元素的底部margin边界之上，但是其margin可以和之前浮动元素的任何区域重合。我们稍微改下之前代码：\n\n### HTML\n\n    <div class=\"a\">float:left</div>\n    <div class=\"b\">clear:left</div>\n\n### CSS\n\n    .a{\n        float:left;\n        height:30px;\n        margin:20px;\n    }\n    .b{\n        clear:left;\n        height:30px;\n        margin-top:50px;\n    }\n\n我们将 `.b` 的 `margin-top` 修改为一个正值，能得到如下 `图三`：\n\n![clear margin](http://demo.doyoe.com/css/margin/images/clear-margin-2.png)（图三）\n\n图中的黄色区域是 `.b` 的 `margin-top`，你会发现，它可以和 `.a` 的任何区域重合。同时，你也可以发现 `图三` 和 `图一` 居然是一样的效果，`.b` 的实际位置都没变化过。来看例子 `DEMO2`：[clear margin 验证](http://demo.doyoe.com/css/margin/bug/clear-margin-2.html)\n\n这是否说明拥有 `clear` 特性的元素对其之前的浮动元素没有任何影响？因为不论是正值还是负值，其位置都不会发生变化。\n\n如果你这样想，那你就又错了。\n\n## 拥有clear特性的元素其margin紧邻之前的浮动元素依然有效\n\n是的，在某个临界值，这一切会发生改变，并非全然无效。\n\n这个临界值是什么？\n\n临界值是包含块内浮动元素的实际高度，即浮动元素的 margin + border + padding + height，拿我们的 `DEMO2` 来详述：\n\n`DEMO2` 中的浮动元素 `.a` 的实际高度为 30 + 20*2 = 70px，也就说当 `.b` 的 `margin-top` 大于 70px 时，超过的部分将会使得 `.b` 发生偏移。\n\n### CSS\n\n    .b{\n        clear:left;\n        height:30px;\n        margin-top:100px;\n    }\n\n我们将 `DEMO2` 中的 `margin-top` 改成 100px，再看看具体情况 `DEMO3`：[clear margin 验证2](http://demo.doyoe.com/css/margin/bug/clear-margin-3.html)，你可以手动的修改其 `margin-top` 值，看看临界值是否如前所述。\n\n## 解决方案\n\nIE6/7下由 `clear` 特性引发的 `margin-top` bug，并没有像 double margin 那样的万精油 `display:inline` 解决方案，所以需要寻求的是让IE6/7和其它浏览器绕过此问题来进行解决。\n\n例如：\n\n* 尽量避免为设置了 `clear` 为非 `none` 值的元素定义margin-top；\n* 如果必须，可以将拥有 `clear` 特性的元素作为容器，在其子元素上设置margin-top；\n* 视情况换成padding-top；\n\n## 要注意的问题\n\n`.a` 和 `.b` 需要在处在同一个块级上下文内，或者其包含块拥有 `padding-top/border-top`，否则临界值情况将失效，不过任何IE目前都不需要此前置条件。用IE和非IE查看 `DEMO4`：[clear margin 验证3](http://demo.doyoe.com/css/margin/bug/clear-margin-4.html)\n\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之bug巡演（二）","updated":1419259275000,"excerpt":"<h2 id=\"IE6/7_clear引发的margin-top_bug\">IE6/7 clear引发的margin-top bug</h2>\n<p>我知道，这是一个被谈及较少的bug，但我几乎可以肯定你在遇见过的同时并没有把它当成是一个bug。</p>\n<h2 id=\"w3c关于_clear_特性的描述\">w3c关于 clear 特性的描述</h2>\n<p>设置了 <code>clear</code> 为非 <code>none</code> 值的元素，其顶部 <code>border</code> 边界在垂直方向不允许出现在之前的浮动元素底部 <code>margin</code> 之上。</p>\n","_id":"gk2yywigqee4p0hh","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之内秀篇","date":1386299700000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","nm5ao52whmbj9mkl"],"content":"<h2 id=\"最Cool的利器\">最Cool的利器</h2>\n<p>一样东西在不同的场景，不同的人手里，所能做的事会有很大不同。我深切的以为 <code>margin</code> 绝对是 CSS 中最有能力的利器之一，不知大家以为然否？</p>\n<p>前面几篇文章大概的讲了一些关于 <code>margin</code> 的特性，所以本篇会聊聊 <code>margin</code> 的实际应用场景，也算让自己休息一下，不用再讲知识点。</p>\n<h2 id=\"有个很典型的需求\">有个很典型的需求</h2>\n<a id=\"more\"></a>\n\n<p>相信接下来这个需求，你十有八九实现过，甚至实现过多次，来看 <code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/text-list.png\" alt=\"经典文本标题列表\"></p>\n<p>我们看到这个图中，有个列表，每个列表项下面都有一条线，但最后一项没有。我们预期的代码是：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span>标题列表<span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>如果每项都有条底线，我们可以很简单的做到，如下：</p>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">li</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">border-bottom</span>:<span class=\"value\"> <span class=\"number\">1px</span> solid <span class=\"hexcolor\">#ccc</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>然而为了处理最后一项，事情就变得有点纠结了。我知道肯定有人要说，我们有 <code>:first-child</code>, <code>:nth-last-child(n)</code>, <code>:nth-last-of-type(n)</code> 之类的CSS3选择符，要处理这个，太easy了。恩，我也不得不承认，CSS3确认让事情变得简单多了。但我们可能需要面对一些国情，因为需要照顾一些弱小者，比如IE6-8，它们离CSS3的世界太远。</p>\n<h2 id=\"传说中的first/last解决方案\">传说中的first/last解决方案</h2>\n<p>所以我们需要找别的方法，于是这样的代码，相信你见过无数遍了：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span>标题列表<span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"last\"</span>&gt;</span>&amp;raquo; 有点累想歇一下好长一个标题<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>我没乱说，你肯定见到类似的代码千百遍了？是的，它确实能够解决我们的问题，请看 <code>DEMO1</code> <a href=\"http://demo.doyoe.com/css/margin/text-list-add-class-solution.htm\" target=\"_blank\" rel=\"external\">传说中的first/last解决方案</a>，代码如下：</p>\n<pre><code><span class=\"id\">#demo</span> <span class=\"class\">.last</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">border-bottom</span>:<span class=\"value\"> <span class=\"number\">0</span> none</span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>使用特殊的class来单独处理这项，但我不是很喜欢这样的code，原因大致有：</p>\n<ul>\n<li>需单独定义一个差异化的class；</li>\n<li>不利于数据循环输出，因为还得判断是否最后一项；</li>\n</ul>\n<h2 id=\"margin的神来之笔\">margin的神来之笔</h2>\n<p>基于以上的原因，肯定会有其它的解决方案出现，这时margin无疑是非常不错的选择，来看代码：</p>\n<pre><code><span class=\"id\">#demo</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\">hidden</span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"tag\">ul</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\"> -<span class=\"number\">1px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>CSS代码如上，HTML代码当时使用开篇时的那段，结果请看：<code>DEMO2</code> <a href=\"http://demo.doyoe.com/css/margin/text-list.htm\" target=\"_blank\" rel=\"external\">margin解决方案</a></p>\n<p>是不是很Cool，完全避免了上述的问题，并且代码量很小。至于为什么可以这样实现，前几篇文章里有说过，margin是互动的，能影响其上下文的布局。本例中，当 <code>ul margin-bottom:-1px</code> ，其本身的高并不会被改变，但其相邻的元素则会往上 <code>1px</code> ，这时相邻的元素即其包含块 #demo，所以给 <code>#demo overflow:hidden</code> ，就直接将那 1px 的边框给裁剪掉了。</p>\n<h2 id=\"再来个相似的需求\">再来个相似的需求</h2>\n<p>看看下述的 <code>图二</code>，这应该也是一种非常常见的图片列表需求：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/img-list.png\" alt=\"经典图片列表\"></p>\n<p>只关注图片之间的间隙，我们发现3张图片，却只有2个间隙。不论你是用 <code>margin-left</code> 或者说是 <code>margin-right</code> ，都无法直接达成这个需求。</p>\n<p>当然，可以像 <code>DEMO1</code> 那样给第一个或者最后一个添加一个特殊类 first/last 来解决。但这种方式刚被说不喜欢，所以想想用 <code>margin</code> 方式吧，思路应该说是和 <code>DEMO2</code> 毫无二致。来看代码：</p>\n<h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\">hidden</span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"tag\">ul</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\">-<span class=\"number\">10px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><h3 id=\"HTML\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span>图片列表<span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">img</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"images/1.jpg\"</span> <span class=\"attribute\">alt</span>=<span class=\"value\">\"\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">img</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"images/2.jpg\"</span> <span class=\"attribute\">alt</span>=<span class=\"value\">\"\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">img</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"images/1.jpg\"</span> <span class=\"attribute\">alt</span>=<span class=\"value\">\"\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>恩，就这么简单，很美妙。效果可移步 <code>DEMO3</code> <a href=\"http://demo.doyoe.com/css/margin/img-list.htm\" target=\"_blank\" rel=\"external\">margin处理图片列表间隙解决方案</a></p>\n<p>我知道不少人还会使用给图片列表容器加宽度的方式来进行处理，当然，它很OK，不过不够灵活，因为在不同场景下，宽度可能不一样，这样的code无法被提取为公用样式，复用性不强。</p>\n<p>而 <code>margin</code> 的方式完全不care几乎任何场景，都可以使用，因为在大多数情况，我们这样一个图片模块都是自适应宽度的，因为它会处于某个layout下，宽度完全取决于layout，所以其实在真实场景下 #demo 的 <code>overflow</code> 并不是必须的，也就是说 <code>margin-right</code> 的负值理论上可以预设成一个很大的值。</p>\n<h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">ul</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\">-<span class=\"number\">100px</span></span></span>; <span class=\"comment\">/* 这个可以设置得比li的间隙更大，所以理论上可以写一次而适用于真实场景的任何情况 */</span>\n<span class=\"rule\">}</span></span>\n</code></pre><p>看我们简单还原的真实场景使用方式：<code>DEMO4</code> <a href=\"http://demo.doyoe.com/css/margin/img-list-2.htm\" target=\"_blank\" rel=\"external\">模拟真实场景：margin处理图片列表间隙解决方案</a>。恩，就这样，灵活性和可扩展性爆棚，不是么？</p>\n<h2 id=\"缩进实例\">缩进实例</h2>\n<p>依然先贴个图，以下是 <code>图三</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/indent.png\" alt=\"文本缩进\"></p>\n<p>貌似是个好常见的需求场景，当然，要实现这样的效果，对于大家来说都不过是信手拈来，再容易不过。</p>\n<h3 id=\"HTML-1\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">strong</span>&gt;</span>简介：<span class=\"tag\">&lt;/<span class=\"title\">strong</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>该写点什么好呢？好头痛，一个能把value念成“哇柳”的中老年人，猛然觉得没文化好可怕。<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>你可能随手就会写下 <code>float + margin/padding</code>，<code>float + bfc</code>，<code>absolute + margin/padding</code>，<code>flex</code> 等方案中的随意一个，恩，都很Cool，我也常这么干。</p>\n<p>只是有的时候在一个小场景下，希望能比较轻量的出来这样的缩进，可能不想有浮动，绝对定位，清除浮动之类的，怎么破？</p>\n<h2 id=\"margin依然是你很好的选择\">margin依然是你很好的选择</h2>\n<p>你想到了吗？是的，用margin。</p>\n<h3 id=\"HTML-2\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">strong</span>&gt;</span>简介：<span class=\"tag\">&lt;/<span class=\"title\">strong</span>&gt;</span>该写点什么好呢？好头痛，一个能把value念成“哇柳”的中老年人，猛然觉得没文化好可怕。<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n</code></pre><h3 id=\"CSS-2\">CSS</h3>\n<pre><code><span class=\"tag\">p</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">padding-left</span>:<span class=\"value\"><span class=\"number\">45px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"tag\">strong</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\">-<span class=\"number\">45px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>看起来很简单，没有浮动，没有绝对定位，没有其它重布局，很清凉有木有？</p>\n<p>甚至 <code>HTML</code> 也可以更简单，因为无需对后面那长段做任何处理，所以不需要再加包裹。来看看具体例子吧。<code>DEMO5</code> <a href=\"http://demo.doyoe.com/css/margin/indent.htm\" target=\"_blank\" rel=\"external\">margin缩进实例</a>。我想这样的轻量方式，在一定时候还是有使用价值的，不是么？</p>\n<h2 id=\"视觉欺骗伪等高\">视觉欺骗伪等高</h2>\n<p>等高布局在一段时间内好似挺火，方案也涌现过不少，如 <code>图四</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/layout.png\" alt=\"等高布局\"></p>\n<p>该图要求，不论是主栏还是侧栏，总是以最高的那列为基准高度。核心代码：</p>\n<h3 id=\"CSS-3\">CSS</h3>\n<pre><code><span class=\"id\">#doc</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\">hidden</span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span>,<span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\">-<span class=\"number\">999px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">padding-bottom</span>:<span class=\"value\"><span class=\"number\">999px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><h3 id=\"HTML-3\">HTML</h3>\n<pre><code>&lt;<span class=\"keyword\">div</span> <span class=\"property\">id</span>=<span class=\"string\">\"doc\"</span>&gt;\n    &lt;<span class=\"keyword\">div</span> <span class=\"property\">id</span>=<span class=\"string\">\"main\"</span>&gt;主内容栏&lt;br /&gt;占位内容&lt;/<span class=\"keyword\">div</span>&gt;\n    &lt;<span class=\"keyword\">div</span> <span class=\"property\">id</span>=<span class=\"string\">\"aside\"</span>&gt;侧边栏&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;/<span class=\"keyword\">div</span>&gt;\n</code></pre><p>先看看结果：<code>DEMO6</code> <a href=\"http://demo.doyoe.com/css/margin/layout.htm\" target=\"_blank\" rel=\"external\">margin伪等高布局</a></p>\n<p>效果和我们的要求一致，达到了等高布局。需要提醒的是，这其实只是视觉欺骗，做到的了伪高等高。主栏和侧栏的实际高度其实并不相等，之所以可以达成这样的效果，其原因在于负 <code>margin</code> 值。我们前文中有提到过，<code>margin</code> 会影响其上下文布局，当我们将 <code>margin-bottom</code> 设置为负值时，其相邻的包含块元素，底部会自动上去其负值的高度，直到最高的那列底部边缘为止，然后裁剪。但该列本身的高度并不会发生变化，同时因为有 <code>padding-bottom</code> 向下扩展，颜色被填充满padding区域，于是达到视觉上的等高。</p>\n<p>描述的貌似有点复杂，没文化好可怕。差不多就这样，不能接着往下写了，要不收不住。</p>\n<p>作为 CSS 的重要属性 <code>margin</code> 有很多可被挖掘的潜力，需要更多的是想法。enjoy it.</p>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之内秀篇.md","raw":"title: margin系列之内秀篇\ndate: 2013-12-06 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin应用]\n---\n\n## 最Cool的利器\n\n一样东西在不同的场景，不同的人手里，所能做的事会有很大不同。我深切的以为 `margin` 绝对是 CSS 中最有能力的利器之一，不知大家以为然否？\n\n前面几篇文章大概的讲了一些关于 `margin` 的特性，所以本篇会聊聊 `margin` 的实际应用场景，也算让自己休息一下，不用再讲知识点。\n\n## 有个很典型的需求\n\n<!--more-->\n\n相信接下来这个需求，你十有八九实现过，甚至实现过多次，来看 `图一`：\n\n![经典文本标题列表](http://demo.doyoe.com/css/margin/images/text-list.png)\n\n我们看到这个图中，有个列表，每个列表项下面都有一条线，但最后一项没有。我们预期的代码是：\n\n    <div id=\"demo\">\n        <h3>标题列表</h3>\n        <ul>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n        </ul>\n    </div>\n\n如果每项都有条底线，我们可以很简单的做到，如下：\n\n    #demo li{\n        border-bottom: 1px solid #ccc;\n    }\n\n然而为了处理最后一项，事情就变得有点纠结了。我知道肯定有人要说，我们有 `:first-child`, `:nth-last-child(n)`, `:nth-last-of-type(n)` 之类的CSS3选择符，要处理这个，太easy了。恩，我也不得不承认，CSS3确认让事情变得简单多了。但我们可能需要面对一些国情，因为需要照顾一些弱小者，比如IE6-8，它们离CSS3的世界太远。\n\n## 传说中的first/last解决方案\n\n所以我们需要找别的方法，于是这样的代码，相信你见过无数遍了：\n\n    <div id=\"demo\">\n        <h3>标题列表</h3>\n        <ul>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li>&raquo; 有点累想歇一下好长一个标题</li>\n            <li class=\"last\">&raquo; 有点累想歇一下好长一个标题</li>\n        </ul>\n    </div>\n\n我没乱说，你肯定见到类似的代码千百遍了？是的，它确实能够解决我们的问题，请看 `DEMO1` [传说中的first/last解决方案](http://demo.doyoe.com/css/margin/text-list-add-class-solution.htm)，代码如下：\n    \n\t#demo .last{\n        border-bottom: 0 none;\n    }\n\n使用特殊的class来单独处理这项，但我不是很喜欢这样的code，原因大致有：\n\n* 需单独定义一个差异化的class；\n* 不利于数据循环输出，因为还得判断是否最后一项；\n\n## margin的神来之笔\n\n基于以上的原因，肯定会有其它的解决方案出现，这时margin无疑是非常不错的选择，来看代码：\n\n\t#demo{\n        overflow:hidden;\n    }\n    #demo ul{\n        margin-bottom: -1px;\n    }\n\nCSS代码如上，HTML代码当时使用开篇时的那段，结果请看：`DEMO2` [margin解决方案](http://demo.doyoe.com/css/margin/text-list.htm)\n\n是不是很Cool，完全避免了上述的问题，并且代码量很小。至于为什么可以这样实现，前几篇文章里有说过，margin是互动的，能影响其上下文的布局。本例中，当 `ul margin-bottom:-1px` ，其本身的高并不会被改变，但其相邻的元素则会往上 `1px` ，这时相邻的元素即其包含块 #demo，所以给 `#demo overflow:hidden` ，就直接将那 1px 的边框给裁剪掉了。\n\n## 再来个相似的需求\n\n看看下述的 `图二`，这应该也是一种非常常见的图片列表需求：\n\n![经典图片列表](http://demo.doyoe.com/css/margin/images/img-list.png)\n\n只关注图片之间的间隙，我们发现3张图片，却只有2个间隙。不论你是用 `margin-left` 或者说是 `margin-right` ，都无法直接达成这个需求。\n\n当然，可以像 `DEMO1` 那样给第一个或者最后一个添加一个特殊类 first/last 来解决。但这种方式刚被说不喜欢，所以想想用 `margin` 方式吧，思路应该说是和 `DEMO2` 毫无二致。来看代码：\n\n### CSS\n\n\t#demo{\n        overflow:hidden;\n    }\n    #demo ul{\n        margin-right:-10px;\n    }\n\n### HTML\n\n    <div id=\"demo\">\n        <h3>图片列表</h3>\n\t\t<ul>\n            <li><img src=\"images/1.jpg\" alt=\"\" /></li>\n            <li><img src=\"images/2.jpg\" alt=\"\" /></li>\n            <li><img src=\"images/1.jpg\" alt=\"\" /></li>\n        </ul>\n    </div>\n\n恩，就这么简单，很美妙。效果可移步 `DEMO3` [margin处理图片列表间隙解决方案](http://demo.doyoe.com/css/margin/img-list.htm)\n\n我知道不少人还会使用给图片列表容器加宽度的方式来进行处理，当然，它很OK，不过不够灵活，因为在不同场景下，宽度可能不一样，这样的code无法被提取为公用样式，复用性不强。\n\n而 `margin` 的方式完全不care几乎任何场景，都可以使用，因为在大多数情况，我们这样一个图片模块都是自适应宽度的，因为它会处于某个layout下，宽度完全取决于layout，所以其实在真实场景下 #demo 的 `overflow` 并不是必须的，也就是说 `margin-right` 的负值理论上可以预设成一个很大的值。\n\n### CSS\n\n    #demo ul{\n        margin-right:-100px; /* 这个可以设置得比li的间隙更大，所以理论上可以写一次而适用于真实场景的任何情况 */\n    }\n\n看我们简单还原的真实场景使用方式：`DEMO4` [模拟真实场景：margin处理图片列表间隙解决方案](http://demo.doyoe.com/css/margin/img-list-2.htm)。恩，就这样，灵活性和可扩展性爆棚，不是么？\n\n## 缩进实例\n\n依然先贴个图，以下是 `图三`：\n\n![文本缩进](http://demo.doyoe.com/css/margin/images/indent.png)\n\n貌似是个好常见的需求场景，当然，要实现这样的效果，对于大家来说都不过是信手拈来，再容易不过。\n\n### HTML\n\n    <div>\n        <strong>简介：</strong>\n        <p>该写点什么好呢？好头痛，一个能把value念成“哇柳”的中老年人，猛然觉得没文化好可怕。</p>\n    </div>\n\n你可能随手就会写下 `float + margin/padding`，`float + bfc`，`absolute + margin/padding`，`flex` 等方案中的随意一个，恩，都很Cool，我也常这么干。\n\n只是有的时候在一个小场景下，希望能比较轻量的出来这样的缩进，可能不想有浮动，绝对定位，清除浮动之类的，怎么破？\n\n## margin依然是你很好的选择\n\n你想到了吗？是的，用margin。\n\n### HTML\n\n    <p><strong>简介：</strong>该写点什么好呢？好头痛，一个能把value念成“哇柳”的中老年人，猛然觉得没文化好可怕。</p>\n\n### CSS\n\n    p{\n        padding-left:45px;\n    }\n    strong{\n        margin-left:-45px;\n    }\n\n\n看起来很简单，没有浮动，没有绝对定位，没有其它重布局，很清凉有木有？\n\n甚至 `HTML` 也可以更简单，因为无需对后面那长段做任何处理，所以不需要再加包裹。来看看具体例子吧。`DEMO5` [margin缩进实例](http://demo.doyoe.com/css/margin/indent.htm)。我想这样的轻量方式，在一定时候还是有使用价值的，不是么？\n\n## 视觉欺骗伪等高\n\n等高布局在一段时间内好似挺火，方案也涌现过不少，如 `图四`：\n\n![等高布局](http://demo.doyoe.com/css/margin/images/layout.png)\n\n该图要求，不论是主栏还是侧栏，总是以最高的那列为基准高度。核心代码：\n\n### CSS\n\n    #doc{\n        overflow:hidden;\n    }\n    #main,#aside{\n        margin-bottom:-999px;\n        padding-bottom:999px;\n    }\n    \n### HTML\n\n    <div id=\"doc\">\n        <div id=\"main\">主内容栏<br />占位内容</div>\n        <div id=\"aside\">侧边栏</div>\n    </div>\n\n先看看结果：`DEMO6` [margin伪等高布局](http://demo.doyoe.com/css/margin/layout.htm)\n\n效果和我们的要求一致，达到了等高布局。需要提醒的是，这其实只是视觉欺骗，做到的了伪高等高。主栏和侧栏的实际高度其实并不相等，之所以可以达成这样的效果，其原因在于负 `margin` 值。我们前文中有提到过，`margin` 会影响其上下文布局，当我们将 `margin-bottom` 设置为负值时，其相邻的包含块元素，底部会自动上去其负值的高度，直到最高的那列底部边缘为止，然后裁剪。但该列本身的高度并不会发生变化，同时因为有 `padding-bottom` 向下扩展，颜色被填充满padding区域，于是达到视觉上的等高。\n\n描述的貌似有点复杂，没文化好可怕。差不多就这样，不能接着往下写了，要不收不住。\n\n作为 CSS 的重要属性 `margin` 有很多可被挖掘的潜力，需要更多的是想法。enjoy it.\n\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之内秀篇","updated":1419259117000,"excerpt":"<h2 id=\"最Cool的利器\">最Cool的利器</h2>\n<p>一样东西在不同的场景，不同的人手里，所能做的事会有很大不同。我深切的以为 <code>margin</code> 绝对是 CSS 中最有能力的利器之一，不知大家以为然否？</p>\n<p>前面几篇文章大概的讲了一些关于 <code>margin</code> 的特性，所以本篇会聊聊 <code>margin</code> 的实际应用场景，也算让自己休息一下，不用再讲知识点。</p>\n<h2 id=\"有个很典型的需求\">有个很典型的需求</h2>\n","_id":"d82qce8chti6rcfd","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之内秀篇（二）","date":1386990900000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","nm5ao52whmbj9mkl"],"content":"<h2 id=\"可挖掘性\">可挖掘性</h2>\n<p>之前已经写过一篇关于 <code>margin</code> 应用场景的文章：<a href=\"hhttp://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a>，当然，它的应用场景会远大于文中所述，无法一一列举。</p>\n<p>所以本篇权当是对此的补遗好了，各位客官如有比较Cool的想法都可以留言给我，我会视情况补丁进来。</p>\n<h2 id=\"1像素圆角\">1像素圆角</h2>\n<a id=\"more\"></a>\n\n<p>这有什么好聊的吗？<code>border-radius</code> 瞬间可将之秒杀。恩，有的时候你不得不承认CSS3真是一把大杀器。不过当年我们是怎么做的？（会暴露年龄么？）</p>\n<p>先看看我们要做什么,<code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/radius.png\" alt=\"1px圆角\">（图一）</p>\n<p>如上图一，我们会这样写：</p>\n<h3 id=\"HTML\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>1px圆角<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>确定<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>取消<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">a</span>,<span class=\"id\">#demo</span> <span class=\"tag\">span</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\">inline-block</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">vertical-align</span>:<span class=\"value\">top</span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"tag\">span</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">1px</span> -<span class=\"number\">1px</span></span></span>; <span class=\"comment\">/* 关键规则 */</span>\n<span class=\"rule\">}</span></span>\n</code></pre><p>一条CSS规则我们就可以实现1px圆角，你信吗？来看<code>DEMO1</code>：<a href=\"http://demo.doyoe.com/css/margin/radius.htm\" target=\"_blank\" rel=\"external\">margin实现1px圆角</a></p>\n<p>看到<code>DEMO1</code>的结果后，你会发现我们确实做到了1px圆角，很简单，有木有？在没有 <code>border-radius</code> 的年代，我们也很欢乐。</p>\n<p>看到Code后，我想应该不用太解释为什么可以实现？</p>\n<p>BTW，多像素圆角也可以参考这种方式来实现，如果你实在不想用图片的话。</p>\n<h2 id=\"已知宽高元素水平垂直居中\">已知宽高元素水平垂直居中</h2>\n<p>必须说，这是一个非常典型的 <code>margin</code> 应用，虽然如今看起来貌似使用场景不是太大，但还是好多人喜欢在面试时对人问起，我偶尔也会，但不多。</p>\n<p>假设一个宽300px，高300px的盒子要在整个页面中水平垂直居中，我们可以这样做：</p>\n<h3 id=\"HTML-1\">HTML</h3>\n<pre><code>&lt;<span class=\"keyword\">div</span> <span class=\"property\">id</span>=<span class=\"string\">\"demo\"</span>&gt;这是一个水平垂直居中的容器&lt;/<span class=\"keyword\">div</span>&gt;\n</code></pre><h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">absolute</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">50%</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">left</span>:<span class=\"value\"><span class=\"number\">50%</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">300px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">300px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\">-<span class=\"number\">150px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\">-<span class=\"number\">150px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>恩，是的，借助绝对定位。我们先来看看 <code>DEMO2</code>：<a href=\"http://demo.doyoe.com/css/margin/alignment.htm\" target=\"_blank\" rel=\"external\">margin实现已知宽高元素水平垂直居中</a></p>\n<p>先通过 <code>top/left</code> 将 <code>#demo</code> 的绝对定位流起始位置设置为当前屏的中心点，此时 <code>#demo</code> 的左上角这个点其实已经是相对于页面水平垂直居中了，由于它的宽度和高度都是300px，所以从起始位置向右下各延伸300px后才是整个 <code>#demo</code> 的真正位置。此时整个 <code>#demo</code> 其实并不是水平垂直居中的，除非我们将 <code>#demo</code> 的中心点放在当前屏的中心点上。怎么做？</p>\n<p>这时我们就需要使用 <code>margin</code> 了，在 <a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a> 这篇文章里，我们就说过 <code>margin</code> 是以自身作为参照物进行位置偏移的。所以我们只需要将 <code>#demo</code> 相对自身向上偏移150px，向左偏移150px，就能够实现将自身的中心点放在当前屏的中心点上，也就实现了自身在当前屏的水平垂直居中。</p>\n<p>为什么代码里是 <code>-150px</code> ？好吧，如果用 <code>margin-top</code> 来实现向上偏移，必须是负值，不是么？如果是正值的话，就是向下偏移了，其实也相当于是 <code>margin-bottom</code> 的正值， <code>margin-left</code> 亦然，我们在 <a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a> 文章最后同样说过这个。基础知识很重要，有木有？</p>\n<h2 id=\"tabstrip底边线重合\">tabstrip底边线重合</h2>\n<p>先上个需求，如 <code>图二</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/tab.png\" alt=\"tabstrip底边线重合\">（图二）</p>\n<p>看到 <code>图二</code> ，我想大家可能知道可能知道要做什么了。</p>\n<p>对，我们要做的就是 tab 项与底边线重合，这应该是我们常见的场景了，<code>margin</code> 仍然是最佳选择。先来看代码：</p>\n<h3 id=\"HTML-2\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span>&gt;</span>分类一<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"on\"</span>&gt;</span>分类二<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span>&gt;</span>分类三<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"?\"</span>&gt;</span>分类四<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><h3 id=\"CSS-2\">CSS</h3>\n<pre><code><span class=\"id\">#demo</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">border-bottom</span>:<span class=\"value\"><span class=\"number\">1px</span> solid <span class=\"hexcolor\">#aaa</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"tag\">a</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\">inline-block</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\">-<span class=\"number\">1px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"><span class=\"number\">1px</span> solid <span class=\"hexcolor\">#aaa</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"class\">.on</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">border-bottom-color</span>:<span class=\"value\"><span class=\"hexcolor\">#fff</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>要实现 <code>tab</code> 中各项与包含块的底边线重合，重点在于将包含块的底边线向上偏移1px，这样就与 <code>tab</code> 各项的底部重合在一起。</p>\n<p>怎样可以做到让包含块底边线向上偏移1px？恩，<code>margin</code> 是那么的顺其自然。我们只需要将 <code>tab</code> 各项的 <code>margin-bottom</code> 设置为 -1px 即可，其本身高度不变，但包含块底部会向上1px。</p>\n<p>来看看具体实现的例子 <code>DEMO3</code>：<a href=\"http://demo.doyoe.com/css/margin/tab.htm\" target=\"_blank\" rel=\"external\">tabstrip底边线重合</a></p>\n<h2 id=\"双重边线\">双重边线</h2>\n<p>实际场景可能比这会稍复杂一些，我们看个大概即可，主要是拓宽一下思路，来看 <code>图三</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/double-lines.png\" alt=\"多重边线\">（图三）</p>\n<p>从图三中，我们可以看到每行都会有一个双色的边线，这就是我们要做的，HTML代码大约是这样：</p>\n<h3 id=\"HTML-3\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>这是一个双重边线的示例<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>这是一个双重边线的示例<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>这是一个双重边线的示例<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>这是一个双重边线的示例<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</code></pre><p>怎么做？恩，我们可以用常规的方式来解决，比如完全使用 <code>border</code> ：</p>\n<h3 id=\"CSS_Case1\">CSS Case1</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">li</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">border-top</span>:<span class=\"value\"><span class=\"number\">1px</span> solid <span class=\"hexcolor\">#fff</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">border-bottom</span>:<span class=\"value\"><span class=\"number\">1px</span> solid <span class=\"hexcolor\">#ccc</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>结果出来后，我们会发现最顶部多出了一条线，同时最底部又少了一条线。当然，这都可以被解决，我们可以让 <code>ul</code> 来辅助完成，例如让其 负margin-top + border-bottom，不过如果 <code>ul</code> 或者其父元素有垂直方向 <code>padding</code> 的话，处理起来可能会稍显蛋疼。</p>\n<p>还有其他解？当然，会有的，来看：</p>\n<h3 id=\"CSS_Case2\">CSS Case2</h3>\n<pre><code><span class=\"id\">#demo</span> <span class=\"tag\">ul</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\">hidden</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#fff</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#demo</span> <span class=\"tag\">li</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\"><span class=\"number\">1px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">border-bottom</span>:<span class=\"value\"><span class=\"number\">1px</span> solid <span class=\"hexcolor\">#ccc</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#eee</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>是的，选择 <code>margin</code> 作为实现手段。以 <code>ul</code> 的底色配合 <code>margin</code> 模拟出线条的外观，这其实也挺讨人喜欢的，不是么？看具体实现 <code>DEMO4</code>：<a href=\"http://demo.doyoe.com/css/margin/double-lines.htm\" target=\"_blank\" rel=\"external\">双重边线</a></p>\n<p><code>margin</code> 模拟边线还可以做什么？比如做个表格神马的，看看 <code>DEMO5</code>：<a href=\"http://demo.doyoe.com/css/margin/table.htm\" target=\"_blank\" rel=\"external\">margin模拟表格边线</a></p>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之内秀篇（二）.md","raw":"title: margin系列之内秀篇（二）\ndate: 2013-12-14 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin应用]\n---\n\n## 可挖掘性\n\n之前已经写过一篇关于 `margin` 应用场景的文章：[margin系列之内秀篇](hhttp://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)，当然，它的应用场景会远大于文中所述，无法一一列举。\n\n所以本篇权当是对此的补遗好了，各位客官如有比较Cool的想法都可以留言给我，我会视情况补丁进来。\n\n## 1像素圆角\n\n<!--more-->\n\n这有什么好聊的吗？`border-radius` 瞬间可将之秒杀。恩，有的时候你不得不承认CSS3真是一把大杀器。不过当年我们是怎么做的？（会暴露年龄么？）\n\n先看看我们要做什么,`图一`：\n\n![1px圆角](http://demo.doyoe.com/css/margin/images/radius.png)（图一）\n\n如上图一，我们会这样写：\n\n### HTML\n\n    <div id=\"demo\">\n        <a href=\"?\"><span>1px圆角</span></a>\n        <a href=\"?\"><span>确定</span></a>\n        <a href=\"?\"><span>取消</span></a>\n    </div>\n\n### CSS\n\n    #demo a,#demo span{\n        display:inline-block;\n        vertical-align:top;\n    }\n    #demo span{\n        margin:1px -1px; /* 关键规则 */\n    }\n\n一条CSS规则我们就可以实现1px圆角，你信吗？来看`DEMO1`：[margin实现1px圆角](http://demo.doyoe.com/css/margin/radius.htm)\n\n看到`DEMO1`的结果后，你会发现我们确实做到了1px圆角，很简单，有木有？在没有 `border-radius` 的年代，我们也很欢乐。\n\n看到Code后，我想应该不用太解释为什么可以实现？\n\nBTW，多像素圆角也可以参考这种方式来实现，如果你实在不想用图片的话。\n\n## 已知宽高元素水平垂直居中\n\n必须说，这是一个非常典型的 `margin` 应用，虽然如今看起来貌似使用场景不是太大，但还是好多人喜欢在面试时对人问起，我偶尔也会，但不多。\n\n假设一个宽300px，高300px的盒子要在整个页面中水平垂直居中，我们可以这样做：\n\n### HTML\n\n    <div id=\"demo\">这是一个水平垂直居中的容器</div>\n\n### CSS\n\n    #demo{\n        position:absolute;\n        top:50%;\n        left:50%;\n        width:300px;\n        height:300px;\n        margin-top:-150px;\n        margin-left:-150px;\n    }\n\n恩，是的，借助绝对定位。我们先来看看 `DEMO2`：[margin实现已知宽高元素水平垂直居中](http://demo.doyoe.com/css/margin/alignment.htm)\n\n先通过 `top/left` 将 `#demo` 的绝对定位流起始位置设置为当前屏的中心点，此时 `#demo` 的左上角这个点其实已经是相对于页面水平垂直居中了，由于它的宽度和高度都是300px，所以从起始位置向右下各延伸300px后才是整个 `#demo` 的真正位置。此时整个 `#demo` 其实并不是水平垂直居中的，除非我们将 `#demo` 的中心点放在当前屏的中心点上。怎么做？\n\n这时我们就需要使用 `margin` 了，在 [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md) 这篇文章里，我们就说过 `margin` 是以自身作为参照物进行位置偏移的。所以我们只需要将 `#demo` 相对自身向上偏移150px，向左偏移150px，就能够实现将自身的中心点放在当前屏的中心点上，也就实现了自身在当前屏的水平垂直居中。\n\n为什么代码里是 `-150px` ？好吧，如果用 `margin-top` 来实现向上偏移，必须是负值，不是么？如果是正值的话，就是向下偏移了，其实也相当于是 `margin-bottom` 的正值， `margin-left` 亦然，我们在 [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md) 文章最后同样说过这个。基础知识很重要，有木有？\n\n## tabstrip底边线重合\n\n先上个需求，如 `图二`：\n\n![tabstrip底边线重合](http://demo.doyoe.com/css/margin/images/tab.png)（图二）\n\n看到 `图二` ，我想大家可能知道可能知道要做什么了。\n\n对，我们要做的就是 tab 项与底边线重合，这应该是我们常见的场景了，`margin` 仍然是最佳选择。先来看代码：\n\n### HTML\n\n    <div id=\"demo\">\n        <a href=\"?\">分类一</a>\n        <a href=\"?\" class=\"on\">分类二</a>\n        <a href=\"?\">分类三</a>\n        <a href=\"?\">分类四</a>\n    </div>\n\n### CSS\n\n    #demo{\n        border-bottom:1px solid #aaa;\n    }\n    #demo a{\n        display:inline-block;\n        margin-bottom:-1px;\n        border:1px solid #aaa;\n    }\n    #demo .on{\n        border-bottom-color:#fff;\n    }\n\n要实现 `tab` 中各项与包含块的底边线重合，重点在于将包含块的底边线向上偏移1px，这样就与 `tab` 各项的底部重合在一起。\n\n怎样可以做到让包含块底边线向上偏移1px？恩，`margin` 是那么的顺其自然。我们只需要将 `tab` 各项的 `margin-bottom` 设置为 -1px 即可，其本身高度不变，但包含块底部会向上1px。\n\n来看看具体实现的例子 `DEMO3`：[tabstrip底边线重合](http://demo.doyoe.com/css/margin/tab.htm)\n\n## 双重边线\n\n实际场景可能比这会稍复杂一些，我们看个大概即可，主要是拓宽一下思路，来看 `图三`：\n\n![多重边线](http://demo.doyoe.com/css/margin/images/double-lines.png)（图三）\n\n从图三中，我们可以看到每行都会有一个双色的边线，这就是我们要做的，HTML代码大约是这样：\n\n### HTML\n\n    <div id=\"demo\">\n        <ul>\n            <li>这是一个双重边线的示例</li>\n            <li>这是一个双重边线的示例</li>\n            <li>这是一个双重边线的示例</li>\n            <li>这是一个双重边线的示例</li>\n        </ul>\n    </div>\n\n怎么做？恩，我们可以用常规的方式来解决，比如完全使用 `border` ：\n\n### CSS Case1\n\n    #demo li{\n        border-top:1px solid #fff;\n        border-bottom:1px solid #ccc;\n    }\n\n结果出来后，我们会发现最顶部多出了一条线，同时最底部又少了一条线。当然，这都可以被解决，我们可以让 `ul` 来辅助完成，例如让其 负margin-top + border-bottom，不过如果 `ul` 或者其父元素有垂直方向 `padding` 的话，处理起来可能会稍显蛋疼。\n\n还有其他解？当然，会有的，来看：\n\n### CSS Case2\n\n    #demo ul{\n        overflow:hidden;\n        background:#fff;\n    }\n    #demo li{\n        margin-bottom:1px;\n        border-bottom:1px solid #ccc;\n        background:#eee;\n    }\n\n是的，选择 `margin` 作为实现手段。以 `ul` 的底色配合 `margin` 模拟出线条的外观，这其实也挺讨人喜欢的，不是么？看具体实现 `DEMO4`：[双重边线](http://demo.doyoe.com/css/margin/double-lines.htm)\n\n`margin` 模拟边线还可以做什么？比如做个表格神马的，看看 `DEMO5`：[margin模拟表格边线](http://demo.doyoe.com/css/margin/table.htm)\n\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之内秀篇（二）","updated":1419259233000,"excerpt":"<h2 id=\"可挖掘性\">可挖掘性</h2>\n<p>之前已经写过一篇关于 <code>margin</code> 应用场景的文章：<a href=\"hhttp://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a>，当然，它的应用场景会远大于文中所述，无法一一列举。</p>\n<p>所以本篇权当是对此的补遗好了，各位客官如有比较Cool的想法都可以留言给我，我会视情况补丁进来。</p>\n<h2 id=\"1像素圆角\">1像素圆角</h2>\n","_id":"anj4tqm5e5iur7op","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之外边距折叠","date":1386126900000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","mfulb62axcfoo1aq"],"content":"<h2 id=\"不怀疑你也在工作中遇见过\">不怀疑你也在工作中遇见过</h2>\n<p>几乎可以不用怀疑，前端工作中的你一定遇见过 <code>margin</code> 折叠。</p>\n<p>不确定？别着急，你可能写过这样的代码：</p>\n<h3 id=\"CSS:\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:\">HTML:</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>我是一个华丽的段落，别看我文字少<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>我是另一个华丽的段落<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>大家觉得这 <code>2p</code> 之间会发生点什么？是会合体呢？还是分开？来看看 <code>DEMO1</code> <a href=\"http://demo.doyoe.com/css/margin/collapse-margin.htm\" target=\"_blank\" rel=\"external\">margin折叠</a></p>\n<a id=\"more\"></a>\n\n<p>好吧，它们真的合体了。按照常规思路，这 <code>2p</code> 之间的空白应该是第一个 <code>p</code> 的 <code>margin-bottom</code> 50px 加上第二 <code>p</code> 的 <code>margin-top</code> 50px，即 <code>50 + 50px = 100px</code> ，但结果总是出乎意料不是么？它们之间只剩下了 <code>50px</code>，这就是 <code>margin折叠</code>。所以任何人遇见过我都不会觉得意外，因为这样的Code看起来没有任何问题。</p>\n<h2 id=\"它们之间到底发生了些什么？\">它们之间到底发生了些什么？</h2>\n<p>这 <code>2p</code> 内部到底发生了什么，才会有这样的表现？</p>\n<p>早在CSS1中就有对 <code>margin</code> 折叠的说明，我们来看看：</p>\n<blockquote>\n<p>原文：The width of the margin on non-floating block-level elements specifies the minimum distance to the edges of surrounding boxes. Two or more adjoining vertical margins (i.e., with no border, padding or content between them) are collapsed to use the maximum of the margin values. In most cases, after collapsing the vertical margins the result is visually more pleasing and closer to what the designer expects.</p>\n<p>翻译：外边距用来指定非浮动元素与其周围盒子边缘的最小距离。两个或两个以上的相邻的垂直外边距会被折叠并使用它们之间最大的那个外边距值。多数情况下，折叠垂直外边距可以在视觉上显得更美观，也更贴近设计师的预期。</p>\n</blockquote>\n<p>从这段话中，我们能获得一些有用的信息：</p>\n<ul>\n<li>发生折叠需要是相邻的非浮动元素；</li>\n<li>折叠发生在垂直外边距上，即margin-top/margin-bottom；</li>\n<li>折叠后取其中最大的那个margin值作为最终值；</li>\n</ul>\n<p>所以 <code>DEMO1</code> 中的 <code>2p</code> 符合折叠的条件，相邻且都不是浮动元素，于是它们就自然合体了。至于取最大的那个值作为折叠后的最终值，因为都是50px，所以无所谓谁谁谁了。</p>\n<h2 id=\"为什么会有margin折叠这样的设计？\">为什么会有margin折叠这样的设计？</h2>\n<p>从上文中，应该能知道个大概？在前面的文章中，我们说过，CSS的基本模型是排版。只是前端工程师现在做得更多的是 <code>布局</code> 而非 <code>文字排版</code>，但CSS并未界定这两者的区别。而 <code>margin</code> 折叠是为实现文本排版的段落间距而提供的特性。所以很多时候 <code>margin</code> 折叠的特性会带给我们诸多疑惑。</p>\n<p>再回到 <code>DEMO1</code> 仔细看看，你会惊讶的发现，其实你只要设置每个 <code>p</code> 有相同的垂直外边距，由于发生会 <code>margin</code> 折叠，所有的 <code>p</code> 之间，及包含块与 <code>p</code> 之间的间隙都是相同的，非常美妙且实现简单，不是么？这正印证了我们引用 <code>CSS1</code> 中的那短话：多数情况下，折叠垂直外边距可以在视觉上显得更美观，也更贴近设计师的预期。</p>\n<h2 id=\"浮动元素真的不会发生margin折叠吗？\">浮动元素真的不会发生margin折叠吗？</h2>\n<p>质疑精神一直都是进步最重要的驱动力之一，我们为什么不能呢？改下代码看看：</p>\n<h3 id=\"CSS:-1\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\"> left</span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>只改CSS代码，HTML不变。迫不及待的想看到验证情况，来吧，还等什么。<code>DEMO2</code> <a href=\"http://demo.doyoe.com/css/margin/float-collapse-margin.htm\" target=\"_blank\" rel=\"external\">验证浮动元素是否会发生margin折叠</a>。</p>\n<p>结果告诉我们，真的没有折叠，<code>2p</code> 间的间隙足足有 <code>100px</code>。</p>\n<p>剩下的2点大家就自行验证吧，相信你能得到满意的额测试结果。</p>\n<h2 id=\"仅此而已？\">仅此而已？</h2>\n<p>回想一下我们在 <a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a> 文中提到过受书写模式影响的一些特性，非常不幸，<code>margin</code> 折叠正好是其中之一。</p>\n<p>是的，在CSS2及后续的规范中，将<code>margin</code> 折叠描述得更为详尽了。</p>\n<p>在水平书写模式下，发生 <code>margin</code> 折叠的是垂直方向，即 <code>margin-top/margin-bottom</code>，在垂直书写模式下，<code>margin</code> 折叠发生在水平方向上，即 <code>margin-right/margin-left</code>。</p>\n<h2 id=\"现在我们来解释一下到底什么是margin折叠？\">现在我们来解释一下到底什么是margin折叠？</h2>\n<p>在CSS中，两个或以上的块元素（可能是兄弟，也可能不是）之间的相邻外边距可以被合并成一个单独的外边距。通过此方式合并的外边距被称为折叠，且产生的已合并的外边距被称为折叠外边距。</p>\n<p>处于同一个块级上下文中的块元素，没有行框、没有间隙、没有内边距和边框隔开它们，这样的元素垂直边缘毗邻，则称之为相邻。</p>\n<h3 id=\"什么是垂直边缘毗邻？\">什么是垂直边缘毗邻？</h3>\n<ul>\n<li>元素的上外边距和其属于常规流中的第一个孩子的上外边距。</li>\n<li>元素的下外边距和其属于常规流中的下一个兄弟的上外边距。</li>\n<li>属于常规流中的最后一个孩子的下外边距和其父亲的下外边距，如果其父亲的高度计算值为 <code>auto</code>。</li>\n<li>元素的上、下外边距，如果该元素没有建立新的块级格式上下文，且 <code>min-height</code> 的计算值为零、<code>height</code> 的计算值为零或 <code>auto</code>、且没有属于常规流中的孩子。</li>\n</ul>\n<p>说得很清楚了，我想是的。你可能需要注意的是发生 <code>margin</code> 折叠的元素不一定是兄弟关系，也能是父子或祖先的关系。</p>\n<h2 id=\"如何避免margin折叠？\">如何避免margin折叠？</h2>\n<p>我想肯定有人要问，那我不想有 <code>margin</code> 折叠的情况发生，该怎么办？其实从上面的规则中，我们已经可以抽出避免 <code>margin</code> 折叠的条件来。</p>\n<ul>\n<li><code>margin</code> 折叠元素只发生在块元素上；</li>\n<li>浮动元素不与其他元素 <code>margin</code> 折叠；</li>\n<li>定义了属性overflow且值不为visible（即创建了新的块级格式化上下文）的块元素，不与它的子元素发生<code>margin</code> 折叠；</li>\n<li>绝对定位元素的 <code>margin</code> 不与任何 <code>margin</code> 发生折叠。</li>\n<li>特殊：根元素的 <code>margin</code> 不与其它任何 <code>margin</code> 发生折叠；</li>\n<li>如果常规流中的一个块元素没有 <code>border-top</code>、<code>padding-top</code>，且其第一个浮动的块级子元素没有间隙，则该元素的上外边距会与其常规流中的第一个块级子元素的上外边距折叠。<br>可能有些绕，我们验证一下 <a href=\"http://demo.doyoe.com/css/margin/collapse-margin-verify.htm\" target=\"_blank\" rel=\"external\"><code>DEMO3</code></a>，在其第一个浮动子元素加个全角空格做间隙，来个反证 <a href=\"http://demo.doyoe.com/css/margin/collapse-margin-re-verify.htm\" target=\"_blank\" rel=\"external\"><code>DEMO4</code></a></li>\n<li>如果一个元素的 <code>min-height</code> 属性为0，且没有上或下边框以及上或下内边距，且 <code>height</code> 为0或者 <code>auto</code>，且不包含行框，且其属于常规流的所有孩子的外边距都折叠了，则折叠其外边距。验证一下 <a href=\"http://demo.doyoe.com/css/margin/collapse-margin-verify-2.htm\" target=\"_blank\" rel=\"external\"><code>DEMO5</code></a></li>\n</ul>\n<h2 id=\"这样干掉margin折叠\">这样干掉margin折叠</h2>\n<p>如果不想发生 <code>margin</code> 折叠，那么你可以根据上面的规则得到方法，不是么？我把它改成非块元素，让它浮动，让它绝对定位，让它 <code>overflow:hidden</code> <a href=\"http://demo.doyoe.com/css/margin/destroy-collapse-margin-by-overflow.htm\" target=\"_blank\" rel=\"external\"><code>DEMO6</code></a>，用边框隔开它们 <a href=\"http://demo.doyoe.com/css/margin/destroy-collapse-margin-by-border.htm\" target=\"_blank\" rel=\"external\"><code>DEMO7</code></a>…随你怎样，信手拈来。</p>\n<p>今天状态不太好，有些地方写得欠妥，之后可能会修改一下。</p>\n<p>BTW: 这篇文章里可能有不少之前文章中没出现过的名词，比如：块级上下文、行框、常规流，如果你对此不甚了解，可以先找资料看看，我以后会讲到。</p>\n<p>enjoy it.</p>\n<h2 id=\"可参考：\">可参考：</h2>\n<ul>\n<li><a href=\"http://www.w3.org/TR/css3-box/#margins\" target=\"_blank\" rel=\"external\">http://www.w3.org/TR/css3-box/#margins</a></li>\n<li><a href=\"http://www.w3.org/TR/css3-box/#collapsing-margins\" target=\"_blank\" rel=\"external\">http://www.w3.org/TR/css3-box/#collapsing-margins</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#collapsing-margins\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#collapsing-margins</a></li>\n<li><a href=\"http://www.w3.org/TR/CSS1/#vertical-formatting\" target=\"_blank\" rel=\"external\">http://www.w3.org/TR/CSS1/#vertical-formatting</a></li>\n</ul>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之外边距折叠.md","raw":"title: margin系列之外边距折叠\ndate: 2013-12-04 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin折叠]\n---\n\n## 不怀疑你也在工作中遇见过\n\n几乎可以不用怀疑，前端工作中的你一定遇见过 `margin` 折叠。\n\n不确定？别着急，你可能写过这样的代码：\n\n### CSS:\n\n```css\np{\n\tmargin: 50px;\n}\n```\n\n### HTML:\n\n```html\n<div id=\"demo\">\n\t<p>我是一个华丽的段落，别看我文字少</p>\n\t<p>我是另一个华丽的段落</p>\n</div>\n```\n\n大家觉得这 `2p` 之间会发生点什么？是会合体呢？还是分开？来看看 `DEMO1` [margin折叠](http://demo.doyoe.com/css/margin/collapse-margin.htm)\n\n<!--more-->\n\n好吧，它们真的合体了。按照常规思路，这 `2p` 之间的空白应该是第一个 `p` 的 `margin-bottom` 50px 加上第二 `p` 的 `margin-top` 50px，即 `50 + 50px = 100px` ，但结果总是出乎意料不是么？它们之间只剩下了 `50px`，这就是 `margin折叠`。所以任何人遇见过我都不会觉得意外，因为这样的Code看起来没有任何问题。\n\n## 它们之间到底发生了些什么？\n\n这 `2p` 内部到底发生了什么，才会有这样的表现？\n\n早在CSS1中就有对 `margin` 折叠的说明，我们来看看：\n\n> 原文：The width of the margin on non-floating block-level elements specifies the minimum distance to the edges of surrounding boxes. Two or more adjoining vertical margins (i.e., with no border, padding or content between them) are collapsed to use the maximum of the margin values. In most cases, after collapsing the vertical margins the result is visually more pleasing and closer to what the designer expects.\n\n> 翻译：外边距用来指定非浮动元素与其周围盒子边缘的最小距离。两个或两个以上的相邻的垂直外边距会被折叠并使用它们之间最大的那个外边距值。多数情况下，折叠垂直外边距可以在视觉上显得更美观，也更贴近设计师的预期。\n\n从这段话中，我们能获得一些有用的信息：\n\n* 发生折叠需要是相邻的非浮动元素；\n* 折叠发生在垂直外边距上，即margin-top/margin-bottom；\n* 折叠后取其中最大的那个margin值作为最终值；\n\n所以 `DEMO1` 中的 `2p` 符合折叠的条件，相邻且都不是浮动元素，于是它们就自然合体了。至于取最大的那个值作为折叠后的最终值，因为都是50px，所以无所谓谁谁谁了。\n\n## 为什么会有margin折叠这样的设计？\n\n从上文中，应该能知道个大概？在前面的文章中，我们说过，CSS的基本模型是排版。只是前端工程师现在做得更多的是 `布局` 而非 `文字排版`，但CSS并未界定这两者的区别。而 `margin` 折叠是为实现文本排版的段落间距而提供的特性。所以很多时候 `margin` 折叠的特性会带给我们诸多疑惑。\n\n再回到 `DEMO1` 仔细看看，你会惊讶的发现，其实你只要设置每个 `p` 有相同的垂直外边距，由于发生会 `margin` 折叠，所有的 `p` 之间，及包含块与 `p` 之间的间隙都是相同的，非常美妙且实现简单，不是么？这正印证了我们引用 `CSS1` 中的那短话：多数情况下，折叠垂直外边距可以在视觉上显得更美观，也更贴近设计师的预期。\n\n## 浮动元素真的不会发生margin折叠吗？\n\n质疑精神一直都是进步最重要的驱动力之一，我们为什么不能呢？改下代码看看：\n\n### CSS:\n\n```css\np{\n\tfloat: left;\n\tmargin: 50px;\n}\n```\n\n只改CSS代码，HTML不变。迫不及待的想看到验证情况，来吧，还等什么。`DEMO2` [验证浮动元素是否会发生margin折叠](http://demo.doyoe.com/css/margin/float-collapse-margin.htm)。\n\n结果告诉我们，真的没有折叠，`2p` 间的间隙足足有 `100px`。\n\n剩下的2点大家就自行验证吧，相信你能得到满意的额测试结果。\n\n## 仅此而已？\n\n回想一下我们在 [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md) 文中提到过受书写模式影响的一些特性，非常不幸，`margin` 折叠正好是其中之一。\n\n是的，在CSS2及后续的规范中，将`margin` 折叠描述得更为详尽了。\n\n在水平书写模式下，发生 `margin` 折叠的是垂直方向，即 `margin-top/margin-bottom`，在垂直书写模式下，`margin` 折叠发生在水平方向上，即 `margin-right/margin-left`。\n\n## 现在我们来解释一下到底什么是margin折叠？\n\n在CSS中，两个或以上的块元素（可能是兄弟，也可能不是）之间的相邻外边距可以被合并成一个单独的外边距。通过此方式合并的外边距被称为折叠，且产生的已合并的外边距被称为折叠外边距。\n\n处于同一个块级上下文中的块元素，没有行框、没有间隙、没有内边距和边框隔开它们，这样的元素垂直边缘毗邻，则称之为相邻。\n\n### 什么是垂直边缘毗邻？\n\n* 元素的上外边距和其属于常规流中的第一个孩子的上外边距。\n* 元素的下外边距和其属于常规流中的下一个兄弟的上外边距。\n* 属于常规流中的最后一个孩子的下外边距和其父亲的下外边距，如果其父亲的高度计算值为 `auto`。\n* 元素的上、下外边距，如果该元素没有建立新的块级格式上下文，且 `min-height` 的计算值为零、` height ` 的计算值为零或 `auto`、且没有属于常规流中的孩子。\n\n说得很清楚了，我想是的。你可能需要注意的是发生 `margin` 折叠的元素不一定是兄弟关系，也能是父子或祖先的关系。\n\n## 如何避免margin折叠？\n\n我想肯定有人要问，那我不想有 `margin` 折叠的情况发生，该怎么办？其实从上面的规则中，我们已经可以抽出避免 `margin` 折叠的条件来。\n\n* `margin` 折叠元素只发生在块元素上；\n* 浮动元素不与其他元素 `margin` 折叠；\n* 定义了属性overflow且值不为visible（即创建了新的块级格式化上下文）的块元素，不与它的子元素发生`margin` 折叠；\n* 绝对定位元素的 `margin` 不与任何 `margin` 发生折叠。\n* 特殊：根元素的 `margin` 不与其它任何 `margin` 发生折叠；\n* 如果常规流中的一个块元素没有 `border-top`、`padding-top`，且其第一个浮动的块级子元素没有间隙，则该元素的上外边距会与其常规流中的第一个块级子元素的上外边距折叠。\n  可能有些绕，我们验证一下 [`DEMO3`](http://demo.doyoe.com/css/margin/collapse-margin-verify.htm)，在其第一个浮动子元素加个全角空格做间隙，来个反证 [`DEMO4`](http://demo.doyoe.com/css/margin/collapse-margin-re-verify.htm)\n* 如果一个元素的 `min-height` 属性为0，且没有上或下边框以及上或下内边距，且 `height` 为0或者 `auto`，且不包含行框，且其属于常规流的所有孩子的外边距都折叠了，则折叠其外边距。验证一下 [`DEMO5`](http://demo.doyoe.com/css/margin/collapse-margin-verify-2.htm)\n\n## 这样干掉margin折叠\n\n如果不想发生 `margin` 折叠，那么你可以根据上面的规则得到方法，不是么？我把它改成非块元素，让它浮动，让它绝对定位，让它 `overflow:hidden` [`DEMO6`](http://demo.doyoe.com/css/margin/destroy-collapse-margin-by-overflow.htm)，用边框隔开它们 [`DEMO7`](http://demo.doyoe.com/css/margin/destroy-collapse-margin-by-border.htm)...随你怎样，信手拈来。\n\n今天状态不太好，有些地方写得欠妥，之后可能会修改一下。\n\nBTW: 这篇文章里可能有不少之前文章中没出现过的名词，比如：块级上下文、行框、常规流，如果你对此不甚了解，可以先找资料看看，我以后会讲到。\n\nenjoy it.\n\n\n## 可参考：\n\n* http://www.w3.org/TR/css3-box/#margins\n* http://www.w3.org/TR/css3-box/#collapsing-margins\n* http://dev.w3.org/csswg/css-box/#collapsing-margins\n* http://www.w3.org/TR/CSS1/#vertical-formatting\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之外边距折叠","updated":1419259064000,"excerpt":"<h2 id=\"不怀疑你也在工作中遇见过\">不怀疑你也在工作中遇见过</h2>\n<p>几乎可以不用怀疑，前端工作中的你一定遇见过 <code>margin</code> 折叠。</p>\n<p>不确定？别着急，你可能写过这样的代码：</p>\n<h3 id=\"CSS:\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:\">HTML:</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>我是一个华丽的段落，别看我文字少<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>我是另一个华丽的段落<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>大家觉得这 <code>2p</code> 之间会发生点什么？是会合体呢？还是分开？来看看 <code>DEMO1</code> <a href=\"http://demo.doyoe.com/css/margin/collapse-margin.htm\" target=\"_blank\" rel=\"external\">margin折叠</a></p>\n","_id":"exrcgton01l5vs5f","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之布局篇","date":1388459700000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","hkyex748pomm8rgz"],"content":"<h2 id=\"前端工程师对CSS的基本诉求\">前端工程师对CSS的基本诉求</h2>\n<p>布局能力或许是Web前端工程师对CSS的最基本的诉求，当开始进入到这个岗位，就避免不了要和CSS打交道，而和CSS交往，布局当然是不可或缺的。</p>\n<p>很遗憾的是，CSS2.1之前都没有出现真正意义上的布局属性，直至现如今的CSS3，才开始出现了一些，如：flex, grid 等，不过其兼容性及国内浏览器的使用情况，真令人捉急。</p>\n<p>不过，有需求就会有变通，对于达成布局目的，已衍生出各式各样的方法，如：float, inline-block, table, absolute 等等。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"margin的布局之道\">margin的布局之道</h2>\n<p>其实，这个话题有点脱离 <code>margin</code> 的能力范围，因为单纯的 <code>margin</code> 并无法完成复杂布局，它更多做的是辅助，但却又难以替代。</p>\n<h2 id=\"经典左右结构\">经典左右结构</h2>\n<p>两栏结构应该是最常见和经典的网页呈现之一吧？如下 <code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/layout-1.png\" alt=\"classsic layout\">（图一）</p>\n<p>相信对于这样一个网页呈现，你不会陌生。那么你有多少种方案可以达成该布局？我想，4至5种应该是保守估计吧？</p>\n<p>这次，我们只看 <code>margin</code> 是如何做的。</p>\n<h2 id=\"absolute_+_margin_方式\">absolute + margin 方式</h2>\n<h3 id=\"HTML\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">header</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"hd\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"title\">header</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"bd\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">aside</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"aside\"</span>&gt;</span>侧边栏固定宽度<span class=\"tag\">&lt;/<span class=\"title\">aside</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"main\"</span>&gt;</span>主内容栏自适应宽度<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">footer</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"ft\"</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n</code></pre><h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">absolute</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">0</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">left</span>:<span class=\"value\"><span class=\"number\">0</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">200px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"><span class=\"number\">210px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>如上关键代码，我们即可实现 <code>图一</code> 布局，该布局有一个特点就是，<code>#main</code> 可以自适应可用空间。</p>\n<p>假定 <code>HTML</code> 是给定的，我们来解读一下 <code>CSS</code> 代码：</p>\n<p>我们知道块级元素的特性之一是换新行，也就是说，如果想让 <code>#main</code> 和 <code>#aside</code> 在同行显示，我们要么改变其显示属性为 <code>inline-level</code>（即之前说的inline-block布局方式），要么改变其流方式（absolute, float, flex and etc…）。</p>\n<p>如上述代码，我们使用了 <code>absolute</code>，即让 ‘#aside’ 脱离常规流，通过绝对定位到想要的位置。</p>\n<h3 id=\"主内容栏自适应宽度\">主内容栏自适应宽度</h3>\n<p>同时你会发现，我们并有改变 <code>#main</code> 的显示属性或者流方式，也就是说其仍然具备块级元素的特性，所以它会自动适应剩余宽度，即我们常说的自适应宽度。</p>\n<p>我们并不希望 <code>#main</code> 区域会包含 <code>#aside</code> 在内，于是利用 <code>margin</code> 给 ‘#aside’ 预留出足够其显示的空间，即可达成我们所要的布局。</p>\n<p>可能你会问为什么是 <code>margin-left:210px</code> 而不是 <code>200px</code>，实际确实应该是 <code>200px</code>，多出来的 <code>10px</code> 只是为了创建一个列间隙，与布局实现无关。</p>\n<p>来看看具体的实现 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/absolute-margin.html\" target=\"_blank\" rel=\"external\">margin+absolute布局：左栏固定主内容自适应</a></p>\n<p>就这样，是不是很简单？其实它还有亮点，那就是：</p>\n<h3 id=\"任意调整列顺序\">任意调整列顺序</h3>\n<p>在不修改 <code>HTML</code> 的情况下，只需简单的修改 <code>CSS</code>，我们即可让左右两栏的顺序调换，来看代码：</p>\n<h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">absolute</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">0</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">right</span>:<span class=\"value\"><span class=\"number\">0</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">200px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"><span class=\"number\">210px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>其实现原理没变，同样看看  <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/absolute-margin-2.html\" target=\"_blank\" rel=\"external\">margin+absolute布局：右栏固定主内容自适应</a></p>\n<h3 id=\"主内容优先显示\">主内容优先显示</h3>\n<p>可以更Cool一点，你觉得呢？很多时候，你也许会考虑到，不论在何种情况下，总想保证主要的内容优先于次要的内容呈现给用户，那么，怎么做？</p>\n<p>很简单，只需要将主要内容的HTML排在次要内容的HTML之前即可，因为它是顺序加载渲染的。我们可以这样：</p>\n<h3 id=\"HTML-1\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">header</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"hd\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"title\">header</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"bd\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"main\"</span>&gt;</span>主内容栏自适应宽度<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">aside</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"aside\"</span>&gt;</span>侧边栏固定宽度<span class=\"tag\">&lt;/<span class=\"title\">aside</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">footer</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"ft\"</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n</code></pre><p>是的，我们只需要将 <code>#main</code> 的HTML挪到 <code>#aside</code> 的HTML前面，令人兴奋的是，改变HTML之后，CSS不需要做任何改变。我们来看 <code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/absolute-margin-3.html\" target=\"_blank\" rel=\"external\">margin+absolute布局：左栏固定主内容自适应，主内容有限显示</a></p>\n<p>当然，调正列顺序的 <code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/absolute-margin-4.html\" target=\"_blank\" rel=\"external\">margin+absolute布局：右栏固定主内容自适应，主内容有限显示</a> 也同样简单，我们只需要写HTML时注意一下即可。</p>\n<h3 id=\"致命缺陷\">致命缺陷</h3>\n<p>列举了 <code>absolute+margin</code> 布局的很多优点，但只说一个问题，就足以让你在是否选用这种方式时深思熟虑，是什么呢？</p>\n<p>我们知道 <code>absolute</code> 是定位流，脱离正常排版，也就是说绝对定位元素不影响其上下文的排版方式，你意识到我想说什么了么？</p>\n<p>OK，用代码来演示：</p>\n<h3 id=\"HTML-2\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">header</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"hd\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"title\">header</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"bd\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"main\"</span>&gt;</span>主内容栏自适应宽度<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">aside</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"aside\"</span>&gt;</span>侧边栏固定宽度，我的内容可能比主内容多，高度比主内容栏高<span class=\"tag\">&lt;/<span class=\"title\">aside</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">footer</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"ft\"</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n</code></pre><p>看完代码，估计你猜到了。是的，<code>#aside</code> 无法撑开父元素的高度，它将会溢出父元素区域，结果如下图：</p>\n<p><img src=\"http://demo.doyoe.com/css/margin/images/layout-2.png\" alt=\"classsic layout\">（图二）</p>\n<p>来看看这缺陷所导致的情况 <code>DEMO5</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/absolute-margin-5.html\" target=\"_blank\" rel=\"external\">margin+absolute布局的致命缺陷</a> </p>\n<p>此时假设你设置父元素 <code>overflow:hidden</code> 那么溢出部分将会被裁减，同样不符合布局意图，无法可破。所以在内容量不可控的场景，不推荐使用这种方式。</p>\n<h2 id=\"float_+_margin_方式\">float + margin 方式</h2>\n<p>和 <code>absolute + margin</code> 方式一样，<code>float + margin</code> 方式一样是经典的利用来布局的方案，并且被更广泛使用。我们仍然以 <code>图一</code> 为例，来看代码：</p>\n<h3 id=\"HTML-3\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">header</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"hd\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"title\">header</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"bd\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">aside</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"aside\"</span>&gt;</span>侧边栏固定宽度<span class=\"tag\">&lt;/<span class=\"title\">aside</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"main\"</span>&gt;</span>主内容栏自适应宽度<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">footer</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"ft\"</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n</code></pre><h3 id=\"CSS-2\">CSS</h3>\n<pre><code><span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">200px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"><span class=\"number\">210px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>如上述代码，我们使用了 <code>float</code>，即从图文环绕形态演变而来。当 <code>#aside</code> 定义了 <code>float</code>，那么紧随其后的元素将会环绕在其周围。不过环绕并不是我们想要的结果，我们想要的是 ‘#main’ 也自成封闭矩形，所以利用 <code>margin</code> 留出足够 <code>#aside</code> 显示的空间，中断环绕即可。</p>\n<p>当然，此时 <code>#main</code> 也是自适应宽度的，来看具体实例 <code>DEMO6</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/float-margin.html\" target=\"_blank\" rel=\"external\">margin+float布局：左栏固定主内容自适应</a></p>\n<p>它是否也具备可任意调整列顺序的特点？何不一试？</p>\n<h3 id=\"CSS-3\">CSS</h3>\n<pre><code><span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">right</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">200px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"><span class=\"number\">210px</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>看过 <code>DEMO7</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/float-margin-2.html\" target=\"_blank\" rel=\"external\">margin+float布局：右栏固定主内容自适应</a>，你会发现，是的，这种方式也支持任意调整列顺序，很棒。</p>\n<p>从这种趋势看来，貌似 <code>float + margin</code> 的方式会成为黑马，不过遗憾的告诉你，这种方式无法支持主内容优先显示。但我们有更Cool的解决方案。</p>\n<h2 id=\"float_+_负margin_方式\">float + 负margin 方式</h2>\n<p>接下来我要说的大家可能都猜到了，对，经典的圣杯布局。至于圣杯的名字由来，大家可以自行Google，这里不做赘述。</p>\n<p>恩，HTML当然是使用主内容优先显示的那种：</p>\n<h3 id=\"HTML-4\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">header</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"hd\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"title\">header</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"bd\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"main\"</span>&gt;</span>主内容栏自适应宽度<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">aside</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"aside\"</span>&gt;</span>侧边栏固定宽度<span class=\"tag\">&lt;/<span class=\"title\">aside</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">footer</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"ft\"</span>&gt;</span>底部<span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n</code></pre><h3 id=\"CSS-4\">CSS</h3>\n<pre><code><span class=\"id\">#bd</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">padding-left</span>:<span class=\"value\"><span class=\"number\">210px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">left</span>:<span class=\"value\">-<span class=\"number\">210px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">200px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\">-<span class=\"number\">100%</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">100%</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>如上代码，既是圣杯布局的核心Code，如果你看懂了，你会发现，这其实很简单，不是么？</p>\n<p>简单解释一下上面的CSS Code，首先我们是在做一个左侧固定宽度，右侧自适应宽度的布局。我们说过要让块级元素在同行显示的条件：改变显示方式，改变流方式，这里我们选择了使用 <code>float</code> 来将 <code>#main</code> 和 <code>#aside</code> 变成浮动流。</p>\n<p>OK，这时我们具备 <code>#main</code> 和 <code>#aside</code> 能在同行显示的前置条件。我们知道，浮动元素其宽度如果没有显式定义，则由其内容决定。正好，<code>#aside</code> 是定宽的，所以显示给它定义 <code>width:200px</code>，但此时 <code>#main</code> 该怎么办？不设置 <code>width</code> 不对，因为宽度将被内容左右，设置 <code>width:100%</code> 也不对，因为这样的话，就没有 <code>#aside</code> 的立足之地了，正确的应该是 <code>width: calc(100% - 200px)</code>，不是么？可惜，这是新特性，只好作罢。</p>\n<p>变通？是的，有的时候稍微换个思路，你会觉得豁然开朗。</p>\n<p><code>#main</code> 不是要自适应吗？那就给它个 <code>100%</code>，怎么做？我们在包含块 <code>#bd</code> 中就将 <code>#aside</code> 的宽度刨除，宽度全部都给 <code>#main</code>。恩，我们只需要这样 <code>#bd{padding-left:210px;}</code> （10px仍然是用来做间隙的），这时 <code>#main</code> 就可以设置 <code>width:100%</code> 了，由于 <code>#bd</code> 设置了 <code>padding</code>，所以已在左边预留出了一块宽 <code>210px</code> 的区域。此时的问题在于如果将 <code>#aside</code> 挪到这个地方，你想对了，我们是在聊 <code>负margin</code> 布局，自然需要利用上。</p>\n<p><code>#aside{margin-left:-100%;}</code> 这样可以了吗？很明显，这样还不行，此时 <code>#aside</code> 和 <code>#main</code> 的起始位置将会重合，因为 <code>#aside</code> 的 <code>margin-left</code> 计算值是相对包含块来计算的，而此时包含块的宽度等于 <code>#main</code> 的宽度。</p>\n<p>如何让 <code>#aside</code> 再向左偏移 <code>210px</code>？显然 <code>margin</code> 是不行了，因为我们已经用掉它了。如果你看过之前的文章的话，你可能还记得，有一篇文章讲 <a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a>。恩，是的，这时我们可以借助相对偏移。</p>\n<p>向左偏移 <code>210px</code> 是件很简单的事：<code>#aside{position:relative;left:-210px;}</code>。</p>\n<p>至此，你的布局OK了，这就是圣杯的实现方式。来看已实现好的示例 <code>DEMO8</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/holy-grail.html\" target=\"_blank\" rel=\"external\">圣杯：左栏固定主内容自适应</a></p>\n<p>当然，圣杯布局必须可以任意调整列顺序，要不，怎么能说是更Cool些的方案呢？</p>\n<h3 id=\"CSS-5\">CSS</h3>\n<pre><code><span class=\"id\">#bd</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">padding-right</span>:<span class=\"value\"><span class=\"number\">210px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#aside</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">right</span>:<span class=\"value\">-<span class=\"number\">210px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">200px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\">-<span class=\"number\">200px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"id\">#main</span><span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">left</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">100%</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><p>这个就直接看示例好了，不再一一解释代码 <code>DEMO9</code>: <a href=\"http://demo.doyoe.com/css/margin/layout/holy-grail-2.html\" target=\"_blank\" rel=\"external\">圣杯：右栏固定主内容自适应</a></p>\n<p>所以圣杯布局具备前两种方式共同的优点，同时没有他们的不足，但圣杯本身也有一些问题，在IE6/7下报废，不过不用慌，因为它可被修复。</p>\n<p>你想到方法了吗？</p>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之布局篇.md","raw":"title: margin系列之布局篇\ndate: 2013-12-31 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin layout]\n---\n\n## 前端工程师对CSS的基本诉求\n\n布局能力或许是Web前端工程师对CSS的最基本的诉求，当开始进入到这个岗位，就避免不了要和CSS打交道，而和CSS交往，布局当然是不可或缺的。\n\n很遗憾的是，CSS2.1之前都没有出现真正意义上的布局属性，直至现如今的CSS3，才开始出现了一些，如：flex, grid 等，不过其兼容性及国内浏览器的使用情况，真令人捉急。\n\n不过，有需求就会有变通，对于达成布局目的，已衍生出各式各样的方法，如：float, inline-block, table, absolute 等等。\n\n<!--more-->\n\n## margin的布局之道\n\n其实，这个话题有点脱离 `margin` 的能力范围，因为单纯的 `margin` 并无法完成复杂布局，它更多做的是辅助，但却又难以替代。\n\n## 经典左右结构\n\n两栏结构应该是最常见和经典的网页呈现之一吧？如下 `图一`：\n\n![classsic layout](http://demo.doyoe.com/css/margin/images/layout-1.png)（图一）\n\n相信对于这样一个网页呈现，你不会陌生。那么你有多少种方案可以达成该布局？我想，4至5种应该是保守估计吧？\n\n这次，我们只看 `margin` 是如何做的。\n\n## absolute + margin 方式\n\n### HTML\n\n    <header id=\"hd\">头部</header>\n    <div id=\"bd\">\n        <aside id=\"aside\">侧边栏固定宽度</aside>\n        <div id=\"main\">主内容栏自适应宽度</div>\n    </div>\n    <footer id=\"ft\">底部</footer>\n\n### CSS\n\n    #aside{\n        position:absolute;\n        top:0;\n        left:0;\n        width:200px;\n    }\n    #main{\n        margin-left:210px;\n    }\n\n如上关键代码，我们即可实现 `图一` 布局，该布局有一个特点就是，`#main` 可以自适应可用空间。\n\n假定 `HTML` 是给定的，我们来解读一下 `CSS` 代码：\n\n我们知道块级元素的特性之一是换新行，也就是说，如果想让 `#main` 和 `#aside` 在同行显示，我们要么改变其显示属性为 `inline-level`（即之前说的inline-block布局方式），要么改变其流方式（absolute, float, flex and etc...）。\n\n如上述代码，我们使用了 `absolute`，即让 '#aside' 脱离常规流，通过绝对定位到想要的位置。\n\n### 主内容栏自适应宽度\n\n同时你会发现，我们并有改变 `#main` 的显示属性或者流方式，也就是说其仍然具备块级元素的特性，所以它会自动适应剩余宽度，即我们常说的自适应宽度。\n\n我们并不希望 `#main` 区域会包含 `#aside` 在内，于是利用 `margin` 给 '#aside' 预留出足够其显示的空间，即可达成我们所要的布局。\n\n可能你会问为什么是 `margin-left:210px` 而不是 `200px`，实际确实应该是 `200px`，多出来的 `10px` 只是为了创建一个列间隙，与布局实现无关。\n\n来看看具体的实现 `DEMO1`: [margin+absolute布局：左栏固定主内容自适应](http://demo.doyoe.com/css/margin/layout/absolute-margin.html)\n\n就这样，是不是很简单？其实它还有亮点，那就是：\n\n### 任意调整列顺序\n\n在不修改 `HTML` 的情况下，只需简单的修改 `CSS`，我们即可让左右两栏的顺序调换，来看代码：\n\n### CSS\n\n    #aside{\n        position:absolute;\n        top:0;\n        right:0;\n        width:200px;\n    }\n    #main{\n        margin-right:210px;\n    }\n\n其实现原理没变，同样看看  `DEMO2`: [margin+absolute布局：右栏固定主内容自适应](http://demo.doyoe.com/css/margin/layout/absolute-margin-2.html)\n\n### 主内容优先显示\n\n可以更Cool一点，你觉得呢？很多时候，你也许会考虑到，不论在何种情况下，总想保证主要的内容优先于次要的内容呈现给用户，那么，怎么做？\n\n很简单，只需要将主要内容的HTML排在次要内容的HTML之前即可，因为它是顺序加载渲染的。我们可以这样：\n\n### HTML\n\n    <header id=\"hd\">头部</header>\n    <div id=\"bd\">\n        <div id=\"main\">主内容栏自适应宽度</div>\n        <aside id=\"aside\">侧边栏固定宽度</aside>\n    </div>\n    <footer id=\"ft\">底部</footer>\n\n是的，我们只需要将 `#main` 的HTML挪到 `#aside` 的HTML前面，令人兴奋的是，改变HTML之后，CSS不需要做任何改变。我们来看 `DEMO3`: [margin+absolute布局：左栏固定主内容自适应，主内容有限显示](http://demo.doyoe.com/css/margin/layout/absolute-margin-3.html)\n\n当然，调正列顺序的 `DEMO4`: [margin+absolute布局：右栏固定主内容自适应，主内容有限显示](http://demo.doyoe.com/css/margin/layout/absolute-margin-4.html) 也同样简单，我们只需要写HTML时注意一下即可。\n\n### 致命缺陷\n\n列举了 `absolute+margin` 布局的很多优点，但只说一个问题，就足以让你在是否选用这种方式时深思熟虑，是什么呢？\n\n我们知道 `absolute` 是定位流，脱离正常排版，也就是说绝对定位元素不影响其上下文的排版方式，你意识到我想说什么了么？\n\nOK，用代码来演示：\n\n### HTML\n\n    <header id=\"hd\">头部</header>\n    <div id=\"bd\">\n        <div id=\"main\">主内容栏自适应宽度</div>\n        <aside id=\"aside\">侧边栏固定宽度，我的内容可能比主内容多，高度比主内容栏高</aside>\n    </div>\n    <footer id=\"ft\">底部</footer>\n\n看完代码，估计你猜到了。是的，`#aside` 无法撑开父元素的高度，它将会溢出父元素区域，结果如下图：\n\n![classsic layout](http://demo.doyoe.com/css/margin/images/layout-2.png)（图二）\n\n来看看这缺陷所导致的情况 `DEMO5`: [margin+absolute布局的致命缺陷](http://demo.doyoe.com/css/margin/layout/absolute-margin-5.html) \n\n此时假设你设置父元素 `overflow:hidden` 那么溢出部分将会被裁减，同样不符合布局意图，无法可破。所以在内容量不可控的场景，不推荐使用这种方式。\n\n## float + margin 方式\n\n和 `absolute + margin` 方式一样，`float + margin` 方式一样是经典的利用来布局的方案，并且被更广泛使用。我们仍然以 `图一` 为例，来看代码：\n\n### HTML\n\n    <header id=\"hd\">头部</header>\n    <div id=\"bd\">\n        <aside id=\"aside\">侧边栏固定宽度</aside>\n        <div id=\"main\">主内容栏自适应宽度</div>\n    </div>\n    <footer id=\"ft\">底部</footer>\n\n### CSS\n\n    #aside{\n        float:left;\n        width:200px;\n    }\n    #main{\n        margin-left:210px;\n    }\n\n如上述代码，我们使用了 `float`，即从图文环绕形态演变而来。当 `#aside` 定义了 `float`，那么紧随其后的元素将会环绕在其周围。不过环绕并不是我们想要的结果，我们想要的是 '#main' 也自成封闭矩形，所以利用 `margin` 留出足够 `#aside` 显示的空间，中断环绕即可。\n\n当然，此时 `#main` 也是自适应宽度的，来看具体实例 `DEMO6`: [margin+float布局：左栏固定主内容自适应](http://demo.doyoe.com/css/margin/layout/float-margin.html)\n\n它是否也具备可任意调整列顺序的特点？何不一试？\n\n### CSS\n\n    #aside{\n        float:right;\n        width:200px;\n    }\n    #main{\n        margin-right:210px;\n    }\n\n\n看过 `DEMO7`: [margin+float布局：右栏固定主内容自适应](http://demo.doyoe.com/css/margin/layout/float-margin-2.html)，你会发现，是的，这种方式也支持任意调整列顺序，很棒。\n\n从这种趋势看来，貌似 `float + margin` 的方式会成为黑马，不过遗憾的告诉你，这种方式无法支持主内容优先显示。但我们有更Cool的解决方案。\n\n## float + 负margin 方式\n\n接下来我要说的大家可能都猜到了，对，经典的圣杯布局。至于圣杯的名字由来，大家可以自行Google，这里不做赘述。\n\n恩，HTML当然是使用主内容优先显示的那种：\n\n### HTML\n\n    <header id=\"hd\">头部</header>\n    <div id=\"bd\">\n        <div id=\"main\">主内容栏自适应宽度</div>\n        <aside id=\"aside\">侧边栏固定宽度</aside>\n    </div>\n    <footer id=\"ft\">底部</footer>\n\n### CSS\n\n    #bd{\n        padding-left:210px;\n    }\n    #aside{\n        float:left;\n        position:relative;\n        left:-210px;\n        width:200px;\n        margin-left:-100%;\n    }\n    #main{\n        float:left;\n        width:100%;\n    }\n\n如上代码，既是圣杯布局的核心Code，如果你看懂了，你会发现，这其实很简单，不是么？\n\n简单解释一下上面的CSS Code，首先我们是在做一个左侧固定宽度，右侧自适应宽度的布局。我们说过要让块级元素在同行显示的条件：改变显示方式，改变流方式，这里我们选择了使用 `float` 来将 `#main` 和 `#aside` 变成浮动流。\n\nOK，这时我们具备 `#main` 和 `#aside` 能在同行显示的前置条件。我们知道，浮动元素其宽度如果没有显式定义，则由其内容决定。正好，`#aside` 是定宽的，所以显示给它定义 `width:200px`，但此时 `#main` 该怎么办？不设置 `width` 不对，因为宽度将被内容左右，设置 `width:100%` 也不对，因为这样的话，就没有 `#aside` 的立足之地了，正确的应该是 `width: calc(100% - 200px)`，不是么？可惜，这是新特性，只好作罢。\n\n变通？是的，有的时候稍微换个思路，你会觉得豁然开朗。\n\n`#main` 不是要自适应吗？那就给它个 `100%`，怎么做？我们在包含块 `#bd` 中就将 `#aside` 的宽度刨除，宽度全部都给 `#main`。恩，我们只需要这样 `#bd{padding-left:210px;}` （10px仍然是用来做间隙的），这时 `#main` 就可以设置 `width:100%` 了，由于 `#bd` 设置了 `padding`，所以已在左边预留出了一块宽 `210px` 的区域。此时的问题在于如果将 `#aside` 挪到这个地方，你想对了，我们是在聊 `负margin` 布局，自然需要利用上。\n\n`#aside{margin-left:-100%;}` 这样可以了吗？很明显，这样还不行，此时 `#aside` 和 `#main` 的起始位置将会重合，因为 `#aside` 的 `margin-left` 计算值是相对包含块来计算的，而此时包含块的宽度等于 `#main` 的宽度。\n\n如何让 `#aside` 再向左偏移 `210px`？显然 `margin` 是不行了，因为我们已经用掉它了。如果你看过之前的文章的话，你可能还记得，有一篇文章讲 [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)。恩，是的，这时我们可以借助相对偏移。\n\n向左偏移 `210px` 是件很简单的事：`#aside{position:relative;left:-210px;}`。\n\n至此，你的布局OK了，这就是圣杯的实现方式。来看已实现好的示例 `DEMO8`: [圣杯：左栏固定主内容自适应](http://demo.doyoe.com/css/margin/layout/holy-grail.html)\n\n当然，圣杯布局必须可以任意调整列顺序，要不，怎么能说是更Cool些的方案呢？\n\n### CSS\n\n    #bd{\n        padding-right:210px;\n    }\n    #aside{\n        float:left;\n        position:relative;\n        right:-210px;\n        width:200px;\n        margin-left:-200px;\n    }\n    #main{\n        float:left;\n        width:100%;\n    }\n\n这个就直接看示例好了，不再一一解释代码 `DEMO9`: [圣杯：右栏固定主内容自适应](http://demo.doyoe.com/css/margin/layout/holy-grail-2.html)\n\n所以圣杯布局具备前两种方式共同的优点，同时没有他们的不足，但圣杯本身也有一些问题，在IE6/7下报废，不过不用慌，因为它可被修复。\n\n你想到方法了吗？\n\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之布局篇","updated":1419259339000,"excerpt":"<h2 id=\"前端工程师对CSS的基本诉求\">前端工程师对CSS的基本诉求</h2>\n<p>布局能力或许是Web前端工程师对CSS的最基本的诉求，当开始进入到这个岗位，就避免不了要和CSS打交道，而和CSS交往，布局当然是不可或缺的。</p>\n<p>很遗憾的是，CSS2.1之前都没有出现真正意义上的布局属性，直至现如今的CSS3，才开始出现了一些，如：flex, grid 等，不过其兼容性及国内浏览器的使用情况，真令人捉急。</p>\n<p>不过，有需求就会有变通，对于达成布局目的，已衍生出各式各样的方法，如：float, inline-block, table, absolute 等等。</p>\n","_id":"3gkot1ry2vwxgcc3","comments":true,"layout":"post","photos":[],"link":""},{"title":"margin系列之百分比","date":1385781300000,"categories":["8d0idf1a8smux0fk"],"tags":["xkgog2qxoibfzddm","7zxwdwtl9163x858","21gb4ziu58ff9499"],"content":"<h2 id=\"你可能从没注意过它\">你可能从没注意过它</h2>\n<p>在 <a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a> 中，说过了 <code>margin</code> 值为 <code>auto</code> 的情况，这次要聊的是值为百分比的情形。</p>\n<p>我必须承认这是一个非常基础的知识点，但有一段时间我发现很多人对此有错误的认知。偶尔在面试或者分享的时候，我会问到这个问题，有人会脱口而出的告诉我他对此的感性理解。</p>\n<p>或许现在大多数人对此不屑一顾，但我仍想说一说，这样以后就可以不再问类似的问题了。</p>\n<h2 id=\"假设有这样一个场景\">假设有这样一个场景</h2>\n<p>仍然以一个问题来开始，这是我之前在 <a href=\"http://weibo.com/doyoe\" target=\"_blank\" rel=\"external\">微博</a> 发过的，原文是这样的：</p>\n<a id=\"more\"></a>\n\n<p>假设一个块级包含容器，宽1000px，高600px，块级子元素定义 <code>margin:10% 5%;</code> 大家说说 <code>margin</code> 的 <code>top, right, bottom, left</code> 计算值最终是多少？</p>\n<p>我记得得到不少 <code>100px 30px 100px 30px</code> 的反馈，我们来还原代码：</p>\n<h3 id=\"CSS:\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">1000px</span></span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">600px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#demo</span> <span class=\"tag\">p</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">10%</span> <span class=\"number\">5%</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"HTML:\">HTML:</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>恩，注意看我所在的位置。<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>事实告诉我们结果是 <code>100px 50px 100px 50px</code>，不论结果是否符合你的预期，我们先来看demo验证一下：<a href=\"//demo.doyoe.com/css/margin/percentage.htm\">margin百分比结果猜想</a>，当然，你也根据上面还原的代码自己创建一个例子。</p>\n<h2 id=\"为什么会这样？\">为什么会这样？</h2>\n<p>诧异吗？不用怀疑浏览器出了问题，因为这是正确的实现。</p>\n<p>规范中注明 <code>margin</code> 的百分比值参照其包含块的宽度进行计算。</p>\n<p>当然，它不会这么简单，和上篇文章 keyword auto 一样，这只发生在默认的 <code>writing-mode: horizontal-tb;</code> 和 <code>direction: ltr;</code> 的情况下。</p>\n<p>当书写模式变成纵向的时候，其参照将会变成包含块的高度。我们改变一下上面例子中的CSS书写模式：</p>\n<h3 id=\"CSS:-1\">CSS:</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#demo</span><span class=\"rules\">{</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">-webkit-writing-mode</span>:<span class=\"value\"> vertical-rl</span></span>; <span class=\"comment\">/* for browsers of webkit engine */</span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">writing-mode</span>:<span class=\"value\"> tb-rl</span></span>; <span class=\"comment\">/* for ie */</span></div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>在 #demo 中添加这2句，其它code不变。也有个例子供观：<a href=\"//demo.doyoe.com/css/margin/percentage2.htm\">书写模式影响margin百分比的参照对象</a>。</p>\n<p>恩，这回的结果是 <code>60px 30px 60px 30px</code> ，因为其参照对象变成了包含块的高度。</p>\n<h2 id=\"顺带再说说\">顺带再说说</h2>\n<p>你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。</p>\n<p>其实这是为了要横向和纵向2个方向都创建相同的margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。</p>\n<p>你可能会问那为什么要选择宽度做参照而不是高度呢？</p>\n<p>这其实更多的要从CSS设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。</p>\n<p>还记得我们在 <a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a> 留了个问题：为什么 <code>margin: auto;</code> 无法再纵向上垂直居中？其实原因也是上面所说的，因为纵向是可以无限延展的，所以没有一个一定的值可以被参照被用来计算。</p>\n<h2 id=\"受书写模式影响的其它特性：\">受书写模式影响的其它特性：</h2>\n<ul>\n<li>margin折叠</li>\n<li>margin的keyword auto value</li>\n<li>padding的百分比值</li>\n</ul>\n<h2 id=\"可参考：\">可参考：</h2>\n<ul>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#the-margin-properties\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#ltpercentagegt\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#ltpercentagegt</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#Calculating\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#Calculating</a></li>\n</ul>\n<h2 id=\"margin系列文章：\">margin系列文章：</h2>\n<ul>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之布局篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md\" target=\"_blank\" rel=\"external\">margin系列之bug巡演</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md\" target=\"_blank\" rel=\"external\">margin系列之内秀篇</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md\" target=\"_blank\" rel=\"external\">margin系列之外边距折叠</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md\" target=\"_blank\" rel=\"external\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md\" target=\"_blank\" rel=\"external\">margin系列之百分比</a></li>\n<li><a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a></li>\n</ul>\n","source":"_posts/css/margin系列之百分比.md","raw":"title: margin系列之百分比\ndate: 2013-11-30 11:15:00\ncategories: CSS\ntags: [margin, w3c, margin百分比]\n---\n\n## 你可能从没注意过它\n\n在 [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md) 中，说过了 `margin` 值为 `auto` 的情况，这次要聊的是值为百分比的情形。\n\n我必须承认这是一个非常基础的知识点，但有一段时间我发现很多人对此有错误的认知。偶尔在面试或者分享的时候，我会问到这个问题，有人会脱口而出的告诉我他对此的感性理解。\n\n或许现在大多数人对此不屑一顾，但我仍想说一说，这样以后就可以不再问类似的问题了。\n\n## 假设有这样一个场景\n\n仍然以一个问题来开始，这是我之前在 [微博](http://weibo.com/doyoe) 发过的，原文是这样的：\n\n<!--more-->\n\n假设一个块级包含容器，宽1000px，高600px，块级子元素定义 `margin:10% 5%;` 大家说说 `margin` 的 `top, right, bottom, left` 计算值最终是多少？\n\n我记得得到不少 `100px 30px 100px 30px` 的反馈，我们来还原代码：\n\n### CSS:\n\n```css\n#demo{\n\twidth: 1000px;\n\theight: 600px;\n}\n#demo p{\n\tmargin: 10% 5%;\n}\n```\n\n### HTML:\n```html\n<div id=\"demo\">\n\t<p>恩，注意看我所在的位置。</p>\n</div>\n```\n\n事实告诉我们结果是 `100px 50px 100px 50px`，不论结果是否符合你的预期，我们先来看demo验证一下：[margin百分比结果猜想](//demo.doyoe.com/css/margin/percentage.htm)，当然，你也根据上面还原的代码自己创建一个例子。\n\n## 为什么会这样？\n\n诧异吗？不用怀疑浏览器出了问题，因为这是正确的实现。\n\n规范中注明 `margin` 的百分比值参照其包含块的宽度进行计算。\n\n当然，它不会这么简单，和上篇文章 keyword auto 一样，这只发生在默认的 `writing-mode: horizontal-tb;` 和 `direction: ltr;` 的情况下。\n\n当书写模式变成纵向的时候，其参照将会变成包含块的高度。我们改变一下上面例子中的CSS书写模式：\n\n### CSS:\n\n```css\n#demo{\n\t-webkit-writing-mode: vertical-rl; /* for browsers of webkit engine */\n\twriting-mode: tb-rl; /* for ie */\n}\n```\n\n在 #demo 中添加这2句，其它code不变。也有个例子供观：[书写模式影响margin百分比的参照对象](//demo.doyoe.com/css/margin/percentage2.htm)。\n\n恩，这回的结果是 `60px 30px 60px 30px` ，因为其参照对象变成了包含块的高度。\n\n## 顺带再说说\n\n你是否觉得这不符合常规的感性认知？感性认知更多感觉应该横向参照包含块宽度，纵向参照包含块高度。\n\n其实这是为了要横向和纵向2个方向都创建相同的margin，如果它们的参照物不一致，那就无法得到两个方向相同的留白。\n\n你可能会问那为什么要选择宽度做参照而不是高度呢？\n\n这其实更多的要从CSS设计意图上去想，因为CSS的基础需求是排版，而通常我们所见的横排文字，其水平宽度一定（仔细回想一下，如果没有显式的定义宽度或者强制一行显示，都会遇到边界换行，而不是水平延展），垂直方向可以无限延展。但当书写模式为纵向时，其参照就变成了高度而不再是宽度了。\n\n还记得我们在 [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md) 留了个问题：为什么 `margin: auto;` 无法再纵向上垂直居中？其实原因也是上面所说的，因为纵向是可以无限延展的，所以没有一个一定的值可以被参照被用来计算。\n\n## 受书写模式影响的其它特性：\n\n* margin折叠\n* margin的keyword auto value\n* padding的百分比值\n\n## 可参考：\n\n* http://dev.w3.org/csswg/css-box/#the-margin-properties\n* http://dev.w3.org/csswg/css-box/#ltpercentagegt\n* http://dev.w3.org/csswg/css-box/#Calculating\n\n## margin系列文章：\n\n* [margin系列之布局篇](http://blog.doyoe.com/~posts/css/2013-12-31-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%83%E5%B1%80%E7%AF%87.md)\n* [margin系列之bug巡演（三）](http://blog.doyoe.com/~posts/css/2013-12-20-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%B8%89%EF%BC%89.md)\n* [margin系列之bug巡演（二）](http://blog.doyoe.com/~posts/css/2013-12-17-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之内秀篇（二）](http://blog.doyoe.com/~posts/css/2013-12-14-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89.md)\n* [margin系列之bug巡演](http://blog.doyoe.com/~posts/css/2013-12-10-margin%E7%B3%BB%E5%88%97%E4%B9%8Bbug%E5%B7%A1%E6%BC%94.md)\n* [margin系列之内秀篇](http://blog.doyoe.com/~posts/css/2013-12-06-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%85%E7%A7%80%E7%AF%87.md)\n* [margin系列之外边距折叠](http://blog.doyoe.com/~posts/css/2013-12-04-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0.md)\n* [margin系列之与相对偏移的异同](http://blog.doyoe.com/~posts/css/2013-12-02-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%8E%E7%9B%B8%E5%AF%B9%E5%81%8F%E7%A7%BB%E7%9A%84%E5%BC%82%E5%90%8C.md)\n* [margin系列之百分比](http://blog.doyoe.com/~posts/css/2013-11-30-margin%E7%B3%BB%E5%88%97%E4%B9%8B%E7%99%BE%E5%88%86%E6%AF%94.md)\n* [margin系列之keyword auto](http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md)","slug":"css/margin系列之百分比","updated":1419259017000,"excerpt":"<h2 id=\"你可能从没注意过它\">你可能从没注意过它</h2>\n<p>在 <a href=\"http://blog.doyoe.com/~posts/css/2013-11-29-margin%E7%B3%BB%E5%88%97%E4%B9%8Bkeyword%20auto.md\" target=\"_blank\" rel=\"external\">margin系列之keyword auto</a> 中，说过了 <code>margin</code> 值为 <code>auto</code> 的情况，这次要聊的是值为百分比的情形。</p>\n<p>我必须承认这是一个非常基础的知识点，但有一段时间我发现很多人对此有错误的认知。偶尔在面试或者分享的时候，我会问到这个问题，有人会脱口而出的告诉我他对此的感性理解。</p>\n<p>或许现在大多数人对此不屑一顾，但我仍想说一说，这样以后就可以不再问类似的问题了。</p>\n<h2 id=\"假设有这样一个场景\">假设有这样一个场景</h2>\n<p>仍然以一个问题来开始，这是我之前在 <a href=\"http://weibo.com/doyoe\" target=\"_blank\" rel=\"external\">微博</a> 发过的，原文是这样的：</p>\n","_id":"zd2r0onmfn8hpidg","comments":true,"layout":"post","photos":[],"link":""},{"title":"你需要了解的z-index世界","date":1390274100000,"categories":["8d0idf1a8smux0fk"],"tags":["p4hw2hu8h59y4fbp","7zxwdwtl9163x858","74enlvi2lbugi6yv"],"content":"<h2 id=\"z-index的重要性\">z-index的重要性</h2>\n<p>在我看来，<code>z-index</code> 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。</p>\n<p>在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。</p>\n<h2 id=\"W3C这样描述\">W3C这样描述</h2>\n<p>每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 “Z轴” 上层层相叠、排列。元素在 “Z轴” 方向上的呈现顺序，由层叠上下文和层叠级别决定。</p>\n<p>在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 “Z轴” 上的呈现顺序。</p>\n<p>同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。</p>\n<p>不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"z-index语法和应用\">z-index语法和应用</h2>\n<pre><code><span class=\"attribute\">z-index</span>: <span class=\"string\">auto | &lt;integer&gt;</span>\n</code></pre><p><code>z-index</code> 接受的属性值为：关键字auto和整数，整数可以是负值（Firefox2.0及之前不支持负值）。</p>\n<p>需要注意的是 <code>z-index</code> 虽然很给力，却只能应用于定位元素（即设置了 <code>position</code> 属性为非 <code>static</code> 值），其它情况下，<code>z-index</code> 将被忽略。</p>\n<p>对于定位元素而言，<code>z-index</code> 意味着：</p>\n<ul>\n<li>确定该元素在当前层叠上下文中的层叠级别。</li>\n<li>确定该元素是否创建了一个新的局部层叠上下文。</li>\n</ul>\n<h2 id=\"创建层叠上下文\">创建层叠上下文</h2>\n<p>在规范中说明：当某个元素的 <code>z-index</code> 未显式定义或者被指定为 <code>auto</code> 时，该元素不会产生新的局部层叠上下文。也就是说它可以和兄弟，祖先，后辈元素处在同一个堆叠上下文中，它们被放在一起比较层叠级别，儿子可以盖住祖先，父亲也可以盖住儿子，儿子甚至可以越过祖先，盖住祖先的兄弟，在层叠上下文中，它们是并级的关系。来看这样一个例子 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/z-index/stacking-context.htm\" target=\"_blank\" rel=\"external\">z-index与创建层叠上下文</a></p>\n<p>值得高兴的是，大部分浏览器都实现了这个特性；不过在IE6/7下，不论 <code>z-index</code> 值是否被显式定义，都将产生新的局部层叠上下文，也就是说子元素不可以越过是定位元素的父亲，子元素都处在新创建的局部层叠上下文中，只能在内部进行层叠级别的比较。</p>\n<h2 id=\"深入浅出\">深入浅出</h2>\n<p>某区域内有个浮层提示或者下拉菜单，于是可能需要遮住该区域之下的区域。</p>\n<h3 id=\"HTML\">HTML</h3>\n<pre><code>&lt;div class=<span class=\"string\">\"a\"</span>&gt;\n    <span class=\"keyword\">...</span>\n    &lt;div class=<span class=\"string\">\"tips\"</span>&gt;我是一个简陋的浮层提示&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=<span class=\"string\">\"b\"</span>&gt;\n    <span class=\"keyword\">...</span>\n&lt;/div&gt;\n</code></pre><h3 id=\"CSS\">CSS</h3>\n<pre><code><span class=\"class\">.a</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.tips</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">absolute</span></span>;<span class=\"rule\"><span class=\"attribute\">z-index</span>:<span class=\"value\"><span class=\"number\">99</span></span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>如上HTML/CSS代码，很显然，浮层 <code>tips</code> 将可以覆盖在其父级元素 <code>a</code> 的兄弟元素 <code>b</code> 之上。</p>\n<p>于是你的意图得到实现，效果如下 <code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/create-stacking-context.png\" alt=\"create stacking context\">（图一）</p>\n<p>这是具体的实现例子  <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-normal.htm\" target=\"_blank\" rel=\"external\">z-index实现元素层叠</a>。</p>\n<p>不过很显然，从 <code>DEMO2</code> 来看，你依然无法准确的判断出在各浏览器下，<code>tips</code> 能盖住 <code>b</code> 是因为其父级的定位还是本身的定位。</p>\n<p>但是我们可以做这样一个测试，我们让 <code>b</code> 也拥有定位，Code如下：</p>\n<h3 id=\"CSS-1\">CSS</h3>\n<pre><code><span class=\"class\">.a</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.tips</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">absolute</span></span>;<span class=\"rule\"><span class=\"attribute\">z-index</span>:<span class=\"value\"><span class=\"number\">99</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.b</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>这段代码run完之后，就比较纠结了，你能得到的效果将会如下 <code>图二</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/create-stacking-context-ie6-7-bug.png\" alt=\"IE6/7 create stacking context bug\">（图二）</p>\n<p>当然要给出具体实现 <code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-ie6-7-bug.htm\" target=\"_blank\" rel=\"external\">验证创建局部层叠上下文</a>。</p>\n<p>首先，我们来解读一下这个例子：因为 <code>a</code> 和 <code>b</code> 都是 <code>relative</code> 且没有定义 <code>z-index</code> （等同于z-index:auto），根据后来居上的原则，此时 <code>b</code> 的层叠级别是要高于 <code>a</code> 的，意思就是说 <code>a</code> 是无法遮住 <code>b</code> 的。不过从 <code>DEMO3</code> 中，我们看到 <code>a</code> 的子元素 <code>tips</code> 遮住了 <code>b</code>，这就表示 <code>tips</code> 能越过它，所以可以判断出 <code>a</code> 没有创建新的局部层叠上下文。很明显，这是完全吻合标准对此的定义。</p>\n<p>不过这是在非IE6/7之下结果。在IE6/7下，我们看到 <code>tips</code> 并没能遮住 <code>b</code>，也就是说 <code>tips</code> 无法越过父级，因为 <code>a</code> 创建了新的局部层叠上下文，而 <code>a</code> 的层叠级别又比 <code>b</code> 低，所以 <code>tips</code> 无法遮住 <code>b</code>，这也就是在IE6/7下常出现覆盖Bug的根源。</p>\n<p>结合 <code>DEMO2</code> 和 <code>DEMO3</code>，你能很肯定的得出以下结论：</p>\n<ul>\n<li>当定位元素没有显式定义z-index值时，不会创建新的局部层叠上下文</li>\n<li>子元素有可能和祖先的兄弟或者祖先兄弟的子元素处在同一个层叠上下文中</li>\n</ul>\n<p>在实际工作中，有些情况可能是你没注意或者已然存在的。比如你事先可能并不知道 <code>b</code> 也是定位元素，或者由于某些原因，你需要将其设置为定位元素，于是可能出现各种兼容问题。如果你不了解 <code>z-index</code> 是如何创建局部层叠上下文，且又没注意到IE6/7的实现错误，那么处理起这样的问题将会让你深陷泥潭。</p>\n<p>所以在实际的场景中，如果是为了相互覆盖而设置为定位，那么显式的定义 <code>z-index</code> 值，将可避免出现创建新局部层叠上下文差异。</p>\n<p>如果需要越过祖先和其它区块内部元素进行相互层叠，那么考虑IE6/7的情况，也应该尽量避免给父级元素进定位。</p>\n<h2 id=\"opacity与层叠上下文\">opacity与层叠上下文</h2>\n<p>我们知道 <code>opacity</code> 属性是用来设置元素不透明度的。但可能知道 <code>opacity</code> 和层叠上下文有关的不多，不过没关系，这里我们简单聊聊这个话题，有两点必须注意：</p>\n<ul>\n<li>当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较</li>\n<li>当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素</li>\n</ul>\n<p>简单来说，当一个普通的元素定义了 <code>opacity</code> 的值小于1时（比如 opacity:.5），那么该元素的层叠级别将会高于普通元素，其效果类同于定位元素没有显式定义 <code>z-index</code> 的情况，唯一的区别是没有显式定义 <code>z-index</code> 的定位元素不会产生局部层叠上下文，而定义了 <code>opacity</code> 值小于1的元素会产生新的局部层叠上下文。</p>\n<h3 id=\"opacity猜想\">opacity猜想</h3>\n<p>假定我们有 <code>a</code>, <code>b</code>, <code>c</code> 三个元素，它们相互层层覆盖在一起，如果这时将 <code>a</code> 元素定义为 <code>opacity:.8</code>，你知道结果会怎样吗？</p>\n<h3 id=\"HTML-1\">HTML</h3>\n<pre><code>&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"a\"</span>&gt;a&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"b\"</span>&gt;b&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"c\"</span>&gt;c&lt;/<span class=\"keyword\">div</span>&gt;\n</code></pre><h3 id=\"CSS-2\">CSS</h3>\n<pre><code><span class=\"class\">.a</span>,<span class=\"class\">.b</span>,<span class=\"class\">.c</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.a</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">opacity</span>:<span class=\"value\">.<span class=\"number\">8</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#999</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.b</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">-<span class=\"number\">70px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#090</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.c</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">-<span class=\"number\">70px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">60px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#f00</span></span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>如果你看明白了我对于 <code>opacity</code> 与层叠上下文的描述，相信你可以猜到结果，是的，<code>a</code> 元素将会覆盖 <code>b</code> 和 <code>c</code> 元素，虽然它在HTML文档中出现在 <code>b</code> 和 <code>c</code> 之前，且不是定位元素。</p>\n<p>必须看看具体的示例不是么？<code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity.htm\" target=\"_blank\" rel=\"external\">opacity与局部层叠上下文猜想</a>。</p>\n<p>如果我们将 <code>b</code> 和 <code>c</code> 设置为定位元素，又将会如何呢？</p>\n<h3 id=\"CSS-3\">CSS</h3>\n<pre><code><span class=\"class\">.a</span>,<span class=\"class\">.b</span>,<span class=\"class\">.c</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.a</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">opacity</span>:<span class=\"value\">.<span class=\"number\">8</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#999</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.b</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">-<span class=\"number\">70px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#090</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.c</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">-<span class=\"number\">70px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">60px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#f00</span></span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>不急，我们可以接着看示例 <code>DEMO5</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-2.htm\" target=\"_blank\" rel=\"external\">opacity与局部层叠上下文猜想2</a>。</p>\n<p>从 <code>DEMO4</code> 和 <code>DEMO5</code> 两例，我们可以验证：当一个普通元素定义了 <code>opacity</code> 为小于1的值时，该元素将像定位元素一样拥有层叠级别，可以覆盖普通元素，并且其层叠级别与未显式定义 <code>z-index</code> 的定位元素一样。</p>\n<h3 id=\"opacity创建局部层叠上下文\">opacity创建局部层叠上下文</h3>\n<p>与未显式定义 <code>z-index</code> 的定位元素唯一不同的是 <code>opacity</code> 值小于1的元素会创建局部层叠上下文。</p>\n<p>创建局部层叠上下文意味着什么，前文我们已经详述过。所以不再赘述，这里只给一个示例用以验证该特性。先奉上代码：</p>\n<h3 id=\"HTML-2\">HTML</h3>\n<pre><code>&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"a\"</span>&gt;a\n    &lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"d\"</span>&gt;d&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"b\"</span>&gt;b&lt;/<span class=\"keyword\">div</span>&gt;\n&lt;<span class=\"keyword\">div</span> <span class=\"type\">class</span>=<span class=\"string\">\"c\"</span>&gt;c&lt;/<span class=\"keyword\">div</span>&gt;\n</code></pre><h3 id=\"CSS-4\">CSS</h3>\n<pre><code><span class=\"class\">.a</span>,<span class=\"class\">.b</span>,<span class=\"class\">.c</span>,<span class=\"class\">.d</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">100px</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.a</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">opacity</span>:<span class=\"value\">.<span class=\"number\">8</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#999</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.b</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">-<span class=\"number\">70px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#090</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.c</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\">-<span class=\"number\">70px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">60px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#f00</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"class\">.d</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">absolute</span></span>;<span class=\"rule\"><span class=\"attribute\">z-index</span>:<span class=\"value\"><span class=\"number\">99</span></span></span>;<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">50px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"hexcolor\">#090</span></span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>你可以先看看具体结果 <code>DEMO6</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-3.htm\" target=\"_blank\" rel=\"external\">opacity创建新局部层叠上下文</a>。</p>\n<p>你会发现虽然 <code>a</code> 的子元素 <code>d</code> 将 <code>z-index</code> 定义为99，但 <code>d</code> 仍然无法遮住 <code>b</code> 和 <code>c</code> 元素，这是因为 <code>a</code> 创建了新的局部层叠上下文，<code>d</code> 元素无法超越父级。</p>\n<p>需要注意的是，此时就算 <code>a</code> 元素变成了定位元素，也不能改变其会创建新局部层叠上下文的命运，因为他设置了 <code>opacity:.8</code>。</p>\n<p>按照我们前文所说，如果 <code>a</code> 没有定义 <code>opacity:.8</code> ，但却像 <code>b</code> 和 <code>c</code> 元素一样设置了 <code>relative</code>，那么其子元素 <code>d</code> 将可以覆盖 <code>b</code> 和 <code>c</code>，至于这个例子就不再奉上了，大家随便写个测试一下即可。</p>\n<h2 id=\"图文替换\">图文替换</h2>\n<p>上述都是理论性的东西，相对枯燥，来个实际点的应用场景。</p>\n<p>我们聊聊图文替换的事，相对于使用较广的方案如：缩进正/负值（正/负text-indent）、超小字体、margin溢出、padding溢出、line-height溢出、透明字体、display:none、visibility:hidden等方案而言，使用 <code>z-index</code> 负值的方案，有一些明显的优势：</p>\n<ul>\n<li>无需考虑是否会有性能问题类同使用上述列举中的前几种方案（比如使用负缩进值-9999px，虽然此时文本被移到屏幕之外或者被裁减，但仍然会绘制一个宽9999px的盒子）；</li>\n<li>没有像类似超小字体和透明字体一样的方案会需要一些额外的hack；</li>\n<li>不像display:none方案那样有SEO欺骗嫌疑；</li>\n<li>当图片加载失败时，可以显示文字；</li>\n<li>and etc…</li>\n</ul>\n<p>先来看看一个图文替换的例子 <code>DEMO7</code>: <a href=\"http://demo.doyoe.com/css/z-index/back-top.htm\" target=\"_blank\" rel=\"external\">图文替换实例</a>。</p>\n<p>在不同的网络环境下，它的表现如下 <code>图三</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/back-top.png\" alt=\"back top\">（图三）</p>\n<p>具体的Code很简单：</p>\n<h3 id=\"HTML-3\">HTML</h3>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"#top\"</span> <span class=\"attribute\">title</span>=<span class=\"value\">\"回到顶部\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>TOP▲<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n</code></pre><h3 id=\"CSS-5\">CSS</h3>\n<pre><code><span class=\"tag\">a</span>,<span class=\"tag\">a</span> <span class=\"tag\">span</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\">inline-block</span></span>;<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"><span class=\"number\">38px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">38px</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"tag\">a</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"><span class=\"function\">url</span>(images/ico.png) no-repeat</span></span>;<span class=\"rule\">}</span></span>\n<span class=\"tag\">a</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">background-position</span>:<span class=\"value\"><span class=\"number\">0</span> -<span class=\"number\">39px</span></span></span>;<span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"><span class=\"hexcolor\">#fff</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"tag\">a</span> <span class=\"tag\">span</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;<span class=\"rule\"><span class=\"attribute\">z-index</span>:<span class=\"value\">-<span class=\"number\">1</span></span></span>;<span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"><span class=\"hexcolor\">#eee</span></span></span>;<span class=\"rule\">}</span></span>\n<span class=\"tag\">a</span><span class=\"pseudo\">:hover</span> <span class=\"tag\">span</span><span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"><span class=\"hexcolor\">#999</span></span></span>;<span class=\"rule\">}</span></span>\n</code></pre><p>你会发现我们将 span 设置为了 <code>z-index:-1</code>，此时它的层叠级别将比正常的元素还要低，所以它可以被其父元素超链接a盖住，从而在图片正常载入时显示父元素的背景图，在网络环境不好图片载入有问题时，显示自身。</p>\n<p>很多时候，要实现一个需求可能有无数种解决方案，能够适应情况越多的方案毫无疑问会脱颖而出，这就要求我们可以去更多的思考，而不是更多的拷贝。</p>\n","source":"_posts/css/你需要了解的z-index世界.md","raw":"title: 你需要了解的z-index世界\ndate: 2014-01-21 11:15:00\ncategories: CSS\ntags: [z-index, w3c, 层叠上下文]\n---\n\n## z-index的重要性\n\n在我看来，`z-index` 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。\n\n在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。\n\n## W3C这样描述\n\n每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 \"Z轴\" 上层层相叠、排列。元素在 \"Z轴\" 方向上的呈现顺序，由层叠上下文和层叠级别决定。\n\n在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 \"Z轴\" 上的呈现顺序。\n\n同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。\n\n不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。\n\n<!--more-->\n\n## z-index语法和应用\n\n    z-index: auto | <integer>\n\n`z-index` 接受的属性值为：关键字auto和整数，整数可以是负值（Firefox2.0及之前不支持负值）。\n\n需要注意的是 `z-index` 虽然很给力，却只能应用于定位元素（即设置了 `position` 属性为非 `static` 值），其它情况下，`z-index` 将被忽略。\n\n对于定位元素而言，`z-index` 意味着：\n\n* 确定该元素在当前层叠上下文中的层叠级别。\n* 确定该元素是否创建了一个新的局部层叠上下文。\n\n## 创建层叠上下文\n\n在规范中说明：当某个元素的 `z-index` 未显式定义或者被指定为 `auto` 时，该元素不会产生新的局部层叠上下文。也就是说它可以和兄弟，祖先，后辈元素处在同一个堆叠上下文中，它们被放在一起比较层叠级别，儿子可以盖住祖先，父亲也可以盖住儿子，儿子甚至可以越过祖先，盖住祖先的兄弟，在层叠上下文中，它们是并级的关系。来看这样一个例子 `DEMO1`: [z-index与创建层叠上下文](http://demo.doyoe.com/css/z-index/stacking-context.htm)\n\n值得高兴的是，大部分浏览器都实现了这个特性；不过在IE6/7下，不论 `z-index` 值是否被显式定义，都将产生新的局部层叠上下文，也就是说子元素不可以越过是定位元素的父亲，子元素都处在新创建的局部层叠上下文中，只能在内部进行层叠级别的比较。\n\n## 深入浅出\n\n某区域内有个浮层提示或者下拉菜单，于是可能需要遮住该区域之下的区域。\n\n### HTML\n\n    <div class=\"a\">\n        ...\n        <div class=\"tips\">我是一个简陋的浮层提示</div>\n    </div>\n    <div class=\"b\">\n        ...\n    </div>\n\n### CSS\n\n    .a{position:relative;}\n    .tips{position:absolute;z-index:99;}\n\n如上HTML/CSS代码，很显然，浮层 `tips` 将可以覆盖在其父级元素 `a` 的兄弟元素 `b` 之上。\n\n于是你的意图得到实现，效果如下 `图一`：\n\n![create stacking context](http://demo.doyoe.com/css/z-index/images/create-stacking-context.png)（图一）\n\n这是具体的实现例子  `DEMO2`: [z-index实现元素层叠](http://demo.doyoe.com/css/z-index/create-stacking-context-normal.htm)。\n\n不过很显然，从 `DEMO2` 来看，你依然无法准确的判断出在各浏览器下，`tips` 能盖住 `b` 是因为其父级的定位还是本身的定位。\n\n但是我们可以做这样一个测试，我们让 `b` 也拥有定位，Code如下：\n\n### CSS\n\n    .a{position:relative;}\n    .tips{position:absolute;z-index:99;}\n    .b{position:relative;}\n\n这段代码run完之后，就比较纠结了，你能得到的效果将会如下 `图二`：\n\n![IE6/7 create stacking context bug](http://demo.doyoe.com/css/z-index/images/create-stacking-context-ie6-7-bug.png)（图二）\n\n当然要给出具体实现 `DEMO3`: [验证创建局部层叠上下文](http://demo.doyoe.com/css/z-index/create-stacking-context-ie6-7-bug.htm)。\n\n首先，我们来解读一下这个例子：因为 `a` 和 `b` 都是 `relative` 且没有定义 `z-index` （等同于z-index:auto），根据后来居上的原则，此时 `b` 的层叠级别是要高于 `a` 的，意思就是说 `a` 是无法遮住 `b` 的。不过从 `DEMO3` 中，我们看到 `a` 的子元素 `tips` 遮住了 `b`，这就表示 `tips` 能越过它，所以可以判断出 `a` 没有创建新的局部层叠上下文。很明显，这是完全吻合标准对此的定义。\n\n不过这是在非IE6/7之下结果。在IE6/7下，我们看到 `tips` 并没能遮住 `b`，也就是说 `tips` 无法越过父级，因为 `a` 创建了新的局部层叠上下文，而 `a` 的层叠级别又比 `b` 低，所以 `tips` 无法遮住 `b`，这也就是在IE6/7下常出现覆盖Bug的根源。\n\n结合 `DEMO2` 和 `DEMO3`，你能很肯定的得出以下结论：\n\n* 当定位元素没有显式定义z-index值时，不会创建新的局部层叠上下文\n* 子元素有可能和祖先的兄弟或者祖先兄弟的子元素处在同一个层叠上下文中\n\n在实际工作中，有些情况可能是你没注意或者已然存在的。比如你事先可能并不知道 `b` 也是定位元素，或者由于某些原因，你需要将其设置为定位元素，于是可能出现各种兼容问题。如果你不了解 `z-index` 是如何创建局部层叠上下文，且又没注意到IE6/7的实现错误，那么处理起这样的问题将会让你深陷泥潭。\n\n所以在实际的场景中，如果是为了相互覆盖而设置为定位，那么显式的定义 `z-index` 值，将可避免出现创建新局部层叠上下文差异。\n\n如果需要越过祖先和其它区块内部元素进行相互层叠，那么考虑IE6/7的情况，也应该尽量避免给父级元素进定位。\n\n## opacity与层叠上下文\n\n我们知道 `opacity` 属性是用来设置元素不透明度的。但可能知道 `opacity` 和层叠上下文有关的不多，不过没关系，这里我们简单聊聊这个话题，有两点必须注意：\n\n* 当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较\n* 当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素\n\n简单来说，当一个普通的元素定义了 `opacity` 的值小于1时（比如 opacity:.5），那么该元素的层叠级别将会高于普通元素，其效果类同于定位元素没有显式定义 `z-index` 的情况，唯一的区别是没有显式定义 `z-index` 的定位元素不会产生局部层叠上下文，而定义了 `opacity` 值小于1的元素会产生新的局部层叠上下文。\n\n### opacity猜想\n\n假定我们有 `a`, `b`, `c` 三个元素，它们相互层层覆盖在一起，如果这时将 `a` 元素定义为 `opacity:.8`，你知道结果会怎样吗？\n\n### HTML\n\n    <div class=\"a\">a</div>\n    <div class=\"b\">b</div>\n    <div class=\"c\">c</div>\n\n### CSS\n\n    .a,.b,.c{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{margin:-70px 0 0 30px;background:#090;}\n    .c{margin:-70px 0 0 60px;background:#f00;}\n\n如果你看明白了我对于 `opacity` 与层叠上下文的描述，相信你可以猜到结果，是的，`a` 元素将会覆盖 `b` 和 `c` 元素，虽然它在HTML文档中出现在 `b` 和 `c` 之前，且不是定位元素。\n\n必须看看具体的示例不是么？`DEMO4`: [opacity与局部层叠上下文猜想](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity.htm)。\n\n如果我们将 `b` 和 `c` 设置为定位元素，又将会如何呢？\n\n### CSS\n\n    .a,.b,.c{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{position:relative;margin:-70px 0 0 30px;background:#090;}\n    .c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n\n不急，我们可以接着看示例 `DEMO5`: [opacity与局部层叠上下文猜想2](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-2.htm)。\n\n从 `DEMO4` 和 `DEMO5` 两例，我们可以验证：当一个普通元素定义了 `opacity` 为小于1的值时，该元素将像定位元素一样拥有层叠级别，可以覆盖普通元素，并且其层叠级别与未显式定义 `z-index` 的定位元素一样。\n\n### opacity创建局部层叠上下文\n\n与未显式定义 `z-index` 的定位元素唯一不同的是 `opacity` 值小于1的元素会创建局部层叠上下文。\n\n创建局部层叠上下文意味着什么，前文我们已经详述过。所以不再赘述，这里只给一个示例用以验证该特性。先奉上代码：\n\n### HTML\n\n    <div class=\"a\">a\n        <div class=\"d\">d</div>\n    </div>\n    <div class=\"b\">b</div>\n    <div class=\"c\">c</div>\n\n### CSS\n\n    .a,.b,.c,.d{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{position:relative;margin:-70px 0 0 30px;background:#090;}\n    .c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n    .d{position:absolute;z-index:99;height:50px;background:#090;}\n\n你可以先看看具体结果 `DEMO6`: [opacity创建新局部层叠上下文](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-3.htm)。\n\n你会发现虽然 `a` 的子元素 `d` 将 `z-index` 定义为99，但 `d` 仍然无法遮住 `b` 和 `c` 元素，这是因为 `a` 创建了新的局部层叠上下文，`d` 元素无法超越父级。\n\n需要注意的是，此时就算 `a` 元素变成了定位元素，也不能改变其会创建新局部层叠上下文的命运，因为他设置了 `opacity:.8`。\n\n按照我们前文所说，如果 `a` 没有定义 `opacity:.8` ，但却像 `b` 和 `c` 元素一样设置了 `relative`，那么其子元素 `d` 将可以覆盖 `b` 和 `c`，至于这个例子就不再奉上了，大家随便写个测试一下即可。\n\n## 图文替换\n\n上述都是理论性的东西，相对枯燥，来个实际点的应用场景。\n\n我们聊聊图文替换的事，相对于使用较广的方案如：缩进正/负值（正/负text-indent）、超小字体、margin溢出、padding溢出、line-height溢出、透明字体、display:none、visibility:hidden等方案而言，使用 `z-index` 负值的方案，有一些明显的优势：\n\n* 无需考虑是否会有性能问题类同使用上述列举中的前几种方案（比如使用负缩进值-9999px，虽然此时文本被移到屏幕之外或者被裁减，但仍然会绘制一个宽9999px的盒子）；\n* 没有像类似超小字体和透明字体一样的方案会需要一些额外的hack；\n* 不像display:none方案那样有SEO欺骗嫌疑；\n* 当图片加载失败时，可以显示文字；\n* and etc...\n\n先来看看一个图文替换的例子 `DEMO7`: [图文替换实例](http://demo.doyoe.com/css/z-index/back-top.htm)。\n\n在不同的网络环境下，它的表现如下 `图三`：\n\n![back top](http://demo.doyoe.com/css/z-index/images/back-top.png)（图三）\n\n具体的Code很简单：\n\n### HTML\n\n    <a href=\"#top\" title=\"回到顶部\"><span>TOP▲</span></a>\n\n### CSS\n\n    a,a span{display:inline-block;width:38px;height:38px;}\n    a{background:url(images/ico.png) no-repeat;}\n    a:hover{background-position:0 -39px;color:#fff;}\n    a span{position:relative;z-index:-1;background-color:#eee;}\n    a:hover span{background-color:#999;}\n\n你会发现我们将 span 设置为了 `z-index:-1`，此时它的层叠级别将比正常的元素还要低，所以它可以被其父元素超链接a盖住，从而在图片正常载入时显示父元素的背景图，在网络环境不好图片载入有问题时，显示自身。\n\n很多时候，要实现一个需求可能有无数种解决方案，能够适应情况越多的方案毫无疑问会脱颖而出，这就要求我们可以去更多的思考，而不是更多的拷贝。","slug":"css/你需要了解的z-index世界","updated":1419259381000,"excerpt":"<h2 id=\"z-index的重要性\">z-index的重要性</h2>\n<p>在我看来，<code>z-index</code> 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。</p>\n<p>在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。</p>\n<h2 id=\"W3C这样描述\">W3C这样描述</h2>\n<p>每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 “Z轴” 上层层相叠、排列。元素在 “Z轴” 方向上的呈现顺序，由层叠上下文和层叠级别决定。</p>\n<p>在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 “Z轴” 上的呈现顺序。</p>\n<p>同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。</p>\n<p>不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。</p>\n","_id":"nex98aexu8ao65xp","comments":true,"layout":"post","photos":[],"link":""},{"title":"去哪儿网招聘","date":1385781300000,"categories":["99fa30wtjirrj2t0"],"tags":["mshszl5cox1zneiw","l2en3nfso2p6z7eq","kmo6wddro7d88lqm"],"content":"<h2 id=\"诚邀加入去哪儿网UED\">诚邀加入去哪儿网UED</h2>\n<ul>\n<li>开放职位：JSer, CSSer</li>\n<li>工作地点：北京苏州街</li>\n<li>工作项目：去哪儿网机票频道（包括PC和Touch）、火车票频道</li>\n<li>联系人：joy（<a href=\"http://weibo.com/doyoe\" target=\"_blank\" rel=\"external\">@doyoe</a>）</li>\n<li>邮箱：joy.du@qunar.com</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"高级Web前端工程师（js方向）\">高级Web前端工程师（js方向）</h2>\n<h3 id=\"职位描述\">职位描述</h3>\n<ul>\n<li>与PM，RD紧密工作在一起，实现产品交互和业务逻辑的开发需求。</li>\n<li>确保产品具有优质的用户体验与良好的兼容性。</li>\n</ul>\n<h3 id=\"职位要求\">职位要求</h3>\n<ul>\n<li>熟练掌握JavaScript，会用原生的JavaScript完成页面展示与交互效果。</li>\n<li>熟练掌握CSS, HTML。</li>\n<li>熟悉JQuery/YUI/MooTools/Dojo等中至少一种框架。</li>\n<li>善于学习，乐于探索，开朗乐观。</li>\n<li>无学历要求。</li>\n</ul>\n<h3 id=\"优先条件\">优先条件</h3>\n<ul>\n<li>有三年以上web前端开发经验。</li>\n<li>对易用性、浏览器原理等有深入见解。</li>\n<li>对用户体验、交互操作流程、及用户需求有深入理解。</li>\n<li>有Web移动开发经验。</li>\n</ul>\n<h2 id=\"高级Web前端工程师（css方向）\">高级Web前端工程师（css方向）</h2>\n<h3 id=\"职位描述-1\">职位描述</h3>\n<ul>\n<li>负责CSS/HTML的开发规范提出和整理；</li>\n<li>负责页面的切图工作；</li>\n<li>协同程序员进行页面的调整和修改；</li>\n</ul>\n<h3 id=\"职位要求-1\">职位要求</h3>\n<ul>\n<li>熟练掌握HTML、CSS，熟悉页面架构和布局。对Web标准和标签语义化有深入理解并有充分的经验。</li>\n<li>熟练掌握Photoshop。</li>\n<li>对浏览器兼容与性能优化方面有丰富的经验。</li>\n<li>热爱总结和分享。</li>\n<li>善于学习，乐于探索，开朗乐观。</li>\n<li>无学历要求。</li>\n</ul>\n<h3 id=\"优先条件-1\">优先条件</h3>\n<ul>\n<li>有三年以上web前端开发经验。</li>\n<li>会Javascript。</li>\n<li>对用户体验、无障碍及可访问性有深入理解。</li>\n<li>有Web移动开发经验。</li>\n</ul>\n","source":"_posts/job/join-us.md","raw":"title: 去哪儿网招聘\ndate: 2013-11-30 11:15:00\ncategories: job\ntags: [Qunar, FE, 前端]\n---\n\n## 诚邀加入去哪儿网UED\n\n* 开放职位：JSer, CSSer\n* 工作地点：北京苏州街\n* 工作项目：去哪儿网机票频道（包括PC和Touch）、火车票频道\n* 联系人：joy（[@doyoe](http://weibo.com/doyoe)）\n* 邮箱：joy.du@qunar.com\n\n<!--more-->\n\n## 高级Web前端工程师（js方向）\n\n### 职位描述\n\n* 与PM，RD紧密工作在一起，实现产品交互和业务逻辑的开发需求。\n* 确保产品具有优质的用户体验与良好的兼容性。\n\n### 职位要求\n\n* 熟练掌握JavaScript，会用原生的JavaScript完成页面展示与交互效果。\n* 熟练掌握CSS, HTML。\n* 熟悉JQuery/YUI/MooTools/Dojo等中至少一种框架。\n* 善于学习，乐于探索，开朗乐观。\n* 无学历要求。\n\n### 优先条件\n\n* 有三年以上web前端开发经验。\n* 对易用性、浏览器原理等有深入见解。\n* 对用户体验、交互操作流程、及用户需求有深入理解。\n* 有Web移动开发经验。\n\n\n## 高级Web前端工程师（css方向）\n\n### 职位描述\n\n* 负责CSS/HTML的开发规范提出和整理；\n* 负责页面的切图工作；\n* 协同程序员进行页面的调整和修改；\n\n### 职位要求\n\n* 熟练掌握HTML、CSS，熟悉页面架构和布局。对Web标准和标签语义化有深入理解并有充分的经验。\n* 熟练掌握Photoshop。\n* 对浏览器兼容与性能优化方面有丰富的经验。\n* 热爱总结和分享。\n* 善于学习，乐于探索，开朗乐观。\n* 无学历要求。\n\n### 优先条件\n\n* 有三年以上web前端开发经验。\n* 会Javascript。\n* 对用户体验、无障碍及可访问性有深入理解。\n* 有Web移动开发经验。","slug":"job/join-us","updated":1419258860000,"excerpt":"<h2 id=\"诚邀加入去哪儿网UED\">诚邀加入去哪儿网UED</h2>\n<ul>\n<li>开放职位：JSer, CSSer</li>\n<li>工作地点：北京苏州街</li>\n<li>工作项目：去哪儿网机票频道（包括PC和Touch）、火车票频道</li>\n<li>联系人：joy（<a href=\"http://weibo.com/doyoe\" target=\"_blank\" rel=\"external\">@doyoe</a>）</li>\n<li>邮箱：joy.du@qunar.com</li>\n</ul>\n","_id":"5izg4tcildopl0qt","comments":true,"layout":"post","photos":[],"link":""},{"title":"一年又要过去了","date":1385608500000,"categories":["b5inm9squxr6gn43"],"tags":["jsdc2eq808tq41oz","zcrnvkkcc6dkw1fn"],"content":"<h2 id=\"_\"> </h2>\n<p>不知不觉，一年又要过去了。这是年龄暴增的节奏啊，以后是不能过青年节了么？次奥！</p>\n","source":"_posts/life/一年又要过去了.md","raw":"title: 一年又要过去了\ndate: 2013-11-28 11:15:00\ncategories: life\ntags: [随笔, 生活]\n---\n\n## \n\n不知不觉，一年又要过去了。这是年龄暴增的节奏啊，以后是不能过青年节了么？次奥！","slug":"life/一年又要过去了","updated":1419304970000,"excerpt":"","_id":"qrp3w453mhf1txa1","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"margin","_id":"xkgog2qxoibfzddm","posts":["ogn3wo6gye4uo4cf","krvosoe69d1gjb9a","qc0hk4qx9rz8bylv","htqok3nybzzjtqsv","gk2yywigqee4p0hh","d82qce8chti6rcfd","anj4tqm5e5iur7op","exrcgton01l5vs5f","3gkot1ry2vwxgcc3","zd2r0onmfn8hpidg"]},{"name":"CSS","_id":"rqjaxt9byt83lcxd","posts":[]},{"name":"w3c","_id":"7zxwdwtl9163x858","posts":["ogn3wo6gye4uo4cf","krvosoe69d1gjb9a","qc0hk4qx9rz8bylv","htqok3nybzzjtqsv","gk2yywigqee4p0hh","d82qce8chti6rcfd","anj4tqm5e5iur7op","exrcgton01l5vs5f","3gkot1ry2vwxgcc3","zd2r0onmfn8hpidg","nex98aexu8ao65xp"]},{"name":"简历","_id":"xliwxjtfgoucdgap","posts":["rx6aw1zvw7r273qs"]},{"name":"自我介绍","_id":"gx0cnqfub1iqaakd","posts":["rx6aw1zvw7r273qs"]},{"name":"博客介绍","_id":"m2v9a6z04mt26whp","posts":["i45vh5wjql4mpqqf"]},{"name":"博客搭建","_id":"jlexiwv5xrtkat6k","posts":["i45vh5wjql4mpqqf"]},{"name":"Hexo","_id":"60ubsndr1k7q0rb6","posts":["i45vh5wjql4mpqqf"]},{"name":"随笔","_id":"jsdc2eq808tq41oz","posts":["qrp3w453mhf1txa1"]},{"name":"生活","_id":"zcrnvkkcc6dkw1fn","posts":["qrp3w453mhf1txa1"]},{"name":"Qunar","_id":"mshszl5cox1zneiw","posts":["5izg4tcildopl0qt"]},{"name":"FE","_id":"l2en3nfso2p6z7eq","posts":["5izg4tcildopl0qt"]},{"name":"前端","_id":"kmo6wddro7d88lqm","posts":["5izg4tcildopl0qt"]},{"name":"百分比","_id":"rdq2v444f1n51fdq","posts":[]},{"name":"margin百分比","_id":"21gb4ziu58ff9499","posts":["zd2r0onmfn8hpidg"]},{"name":"margin偏移","_id":"nynebqeew1itqkff","posts":["htqok3nybzzjtqsv"]},{"name":"margin折叠","_id":"mfulb62axcfoo1aq","posts":["exrcgton01l5vs5f"]},{"name":"margin应用","_id":"nm5ao52whmbj9mkl","posts":["d82qce8chti6rcfd","anj4tqm5e5iur7op"]},{"name":"margin bug","_id":"d1thyqezlca2ax67","posts":["krvosoe69d1gjb9a","qc0hk4qx9rz8bylv","gk2yywigqee4p0hh"]},{"name":"margin layout","_id":"hkyex748pomm8rgz","posts":["3gkot1ry2vwxgcc3"]},{"name":"z-index","_id":"p4hw2hu8h59y4fbp","posts":["nex98aexu8ao65xp"]},{"name":"层叠上下文","_id":"74enlvi2lbugi6yv","posts":["nex98aexu8ao65xp"]}]}